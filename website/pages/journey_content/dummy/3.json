{"title":"Architecture Principles","htmlContent":" <div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Additionally we define the following principles that our architecture is based on:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Component Oriented Design</strong><br>\nWe follow a strictly component oriented design to address the following sub-principles:</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a></p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Reusability\">Reusability</a> and avoiding <a href=\"http://en.wikipedia.org/wiki/Redundant_code\">redundant code</a></p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Information_hiding\">Information Hiding</a> via component API and its exchangeable implementation treated as secret.</p>\n</li>\n<li>\n<p><em>Design by Contract</em> for self-contained, descriptive, and stable component APIs.</p>\n</li>\n<li>\n<p><a href=\"#technical-architecture\">Layering</a> as well as separation of business logic from technical code for better maintenance.</p>\n</li>\n<li>\n<p><em>Data Sovereignty</em> (and <em>high cohesion with low coupling</em>) says that a component is responsible for its data and changes to this data shall only happen via the component. Otherwise, maintenance problems will arise to ensure that data remains consistent. Therefore, interfaces of a component that may be used by other components are designed <em>call-by-value</em> and not <em>call-by-reference</em>.</p>\n</li>\n</ul>\n</div>\n</li>\n<li>\n<p><strong>Homogeneity</strong><br>\nSolve similar problems in similar ways and establish a uniform <a href=\"coding-conventions.asciidoc\">code-style</a>.</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>As an architect you should be prepared for the future by reading the <a href=\"https://www.capgemini.com/de-de/wp-content/uploads/sites/5/2020/07/TechnoVision-2020-Report.pdf\">TechnoVision</a>.</p>\n</div>\n</div> "}