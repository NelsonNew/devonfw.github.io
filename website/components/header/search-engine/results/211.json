{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-package-managers.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-package-managers.asciidoc_what-does-the-lock-file-do","title":"What does the lock file do","breadcrumbs":["Angular","Guides","Package Managers"],"text":"What does the lock file do\n\nThe purpose of files yarn.lock and package-json.lock is to freeze versions for a short time.\n\n\nThe following problem is solved:\n\n\n\n\nDeveloper A upgrades the dependency express to fixed version 4.16.3.\n\n\nexpress has sub-dependency accepts with version selector ~1.3.5\n\n\nHis local node_modules folder receives accepts in version 1.3.5\n\n\nOn his machine everything is working fine\n\n\nAfterward version 1.3.6 of accepts is published - it contains a major bug\n\n\nDeveloper B now clones the repo and loads the dependencies.\n\n\nHe receives version 1.3.6 of accepts and blames developer A for upgrading to a broken version.\n\n\n\n\nBoth yarn.lock and package-json.lock freeze all the dependencies.\nFor example in yarn lock you will find.\n\n\nListing 21. yarn.lock example (excerp)\n\n\n\n\n\nThe described problem is solved by the example yarn.lock file.\n\n\n\n\naccepts is frozen at version ~1.3.5\n\n\nAll of its sub-dependencies are also frozen.\nIt needs mime-types at version ~2.1.18 which is frozen at 2.1.18.\nmime-types needs mime-db at ~1.33.0 which is frozen at 1.33.0\n\n\n\n\nEvery developer will receive the same versions of every dependency.\n\n\n\n\n\nImportant\n\n\nYou have to make sure all your developers are using the same npm/yarn version - this includes the CI build.\n\n\n\n\n\n\n\n\n"}