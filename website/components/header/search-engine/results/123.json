{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-angular-lazy-loading.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-angular-lazy-loading.asciidoc_an-example-with-angular","title":"An example with Angular","breadcrumbs":["Angular","Angular","Angular Lazy loading"],"text":"An example with Angular\n\nTo explain how lazy loading is implemented using angular, a basic sample app is going to be developed. This app will consist in a window named \"level 1\" that contains two buttons that redirects to other windows in a \"second level\". It is a simple example, but useful to understand the relation between angular modules and lazy loading.\n\n\n\n\n\nFigure 14. Levels app structure.\n\n\nThis graphic shows that modules acts as gates to access components \"inside\" them.\n\n\nBecause the objective of this guide is related mainly with logic, the html structure and SCSS styles are less relevant, but the complete code can be found as a sample here.\n\n\nImplementation\n\nFirst write in a console ng new level-app --routing, to generate a new project called level-app including an app-routing.module.ts file (--routing flag). If you are using Nx, the command would be nx generate @nrwl/angular:app level-app --routing in your Nx workspace.\n\n\nIn the file app.component.html delete all the content except the router-outlet tag.\n\n\nListing 25. File app.component.html\n\n\n\n\n\nThe next steps consists on creating features modules.\n\n\n\n\nrun ng generate module first --routing  to generate a module named first.\n\n\nrun ng generate module first/second-left --routing to generate a module named second-left under first.\n\n\nrun ng generate module first/second-right --routing to generate a module second-right under first.\n\n\nrun ng generate component first/first to generate a component named first inside the module first.\n\n\nrun ng generate component first/second-left/content to generate a component content inside the module second-left.\n\n\nrun ng generate component first/second-right/content to generate a component content inside the module second-right.\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\nTo move between components we have to configure the routes used:\n\n\nIn app-routing.module.ts add a path 'first' to FirstComponent and a redirection from '' to 'first'.\n\n\nListing 26. File app-routing.module.ts.\n\n\n\n\n\nIn app.module.ts import the module which includes FirstComponent.\n\n\nListing 27. File app.module.ts\n\n\n\n\n\nIn first-routing.module.ts add routes that direct to the content of SecondRightModule and SecondLeftModule. The content of both modules have the same name so, in order to avoid conflicts the name of the components are going to be changed using as ( original-name as new-name).\n\n\nListing 28. File first-routing.module.ts\n\n\n\n\n\nIn first.module.ts import SecondLeftModule and SecondRightModule.\n\n\nListing 29. File first.module.ts\n\n\n\n\n\nUsing the current configuration, we have a project that loads all the modules in a eager way. Run ng serve (with --project=level-app in an Nx workspace) to see what happens.\n\n\nFirst, during the compilation we can see that just a main file is built.\n\n\n\n\n\nFigure 15. Compile eager.\n\n\nIf we go to http://localhost:4200/first and open developer options (F12 on Chrome), it is found that a document named \"first\" is loaded.\n\n\n\n\n\nFigure 16. First level eager.\n\n\nIf we click on [Go to right module] a second level module opens, but there is no 'second-right' document.\n\n\n\n\n\nFigure 17. Second level right eager.\n\n\nBut, typing the URL directly will load 'second-right' but no 'first', even if we click on [Go back]\n\n\n\n\n\nFigure 18. Second level right eager direct URL.\n\n\nModifying an angular application to load its modules lazily is easy, you have to change the routing configuration of the desired module (for example FirstModule).\n\n\nListing 30. File app-routing.module.ts.\n\n\n\n\n\nNotice that instead of loading a component, you dynamically import it in a loadChildren attribute because modules acts as gates to access components \"inside\" them. Updating the app to load lazily has four consequences:\n\n\n\n\nNo component attribute.\n\n\nNo import of FirstComponent.\n\n\nFirstModule import has to be removed from the imports array at app.module.ts.\n\n\nChange of context.\n\n\n\n\nIf we check first-routing.module.ts again, we can see that the path for ContentLeft and ContentRight is set to 'first/second-left' and 'first/second-right' respectively, so writing http://localhost:4200/first/second-left will redirect us to ContentLeft. However, after loading a module with loadChildren setting the path to 'second-left' and 'second-right' is enough because it acquires the context set by AppRoutingModule.\n\n\nListing 31. File first-routing.module.ts\n\n\n\n\n\nIf we go to 'first' then FirstModule is situated in '/first' but also its children ContentLeft and ContentRight, so it is not necessary to write in their path 'first/second-left' and 'first/second-right', because that will situate the components on 'first/first/second-left' and  'first/first/second-right'.\n\n\n\n\n\nFigure 19. First level lazy wrong path.\n\n\nWhen we compile an app with lazy loaded modules, files containing them will be generated\n\n\n\n\n\nFigure 20. First level lazy compilation.\n\n\nAnd if we go to developer tools â†’ network, we can find those modules loaded (if they are needed).\n\n\n\n\n\nFigure 21. First level lazy.\n\n\nTo load the component ContentComponent of SecondLeftModule lazily, we have to load SecondLeftModule as a children of FirstModule:\n\n\n\n\nChange component to loadChildren and reference SecondLeftModule.\n\n\n\n\nListing 32. File first-routing.module.ts.\n\n\n\n\n\n\n\nRemove SecondLeftModule at first.component.ts\n\n\nRoute the components inside SecondLeftModule. Without this step nothing would be displayed.\n\n\n\n\nListing 33. File second-left-routing.module.ts.\n\n\n\n\n\n\n\nrun ng serve to generate files containing the lazy modules.\n\n\n\n\n\n\n\nFigure 22. Second level lazy loading compilation.\n\n\nClicking on [Go to left module] triggers the load of SecondLeftModule.\n\n\n\n\n\nFigure 23. Second level lazy loading network.\n\n\n\n\n"}