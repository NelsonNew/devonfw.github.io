{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-angular-theming.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-angular-theming.asciidoc_custom-themes","title":"Custom themes","breadcrumbs":["Angular","Angular","Angular Material Theming"],"text":"Custom themes\n\nSometimes pre-built themes do not meet the needs of a project, because color schemas are too specific or do not incorporate branding colors, in those situations custom themes can be built to offer a better solution to the client.\n\n\nFor this topic, we are going to use a basic layout project that can be found in devon4ts-samples repository.\n\n\nBasics\n\nBefore starting writing custom themes, there are some necessary things that have to be mentioned:\n\n\n\n\nAdd a default theme: The project mentioned before has just one global SCSS style sheet styles.scss that includes indigo-pink.scss which will be the default theme.\n\n\nAdd @import '~@angular/material/theming'; at the beginning of the every style sheet to be able to use angular material pre-built color palettes and functions.\n\n\nAdd @include mat-core(); once per project, so if you are writing multiple themes in multiple files you could import those files from a 'central' one (for example styles.scss). This includes all common styles that are used by multiple components.\n\n\n\n\n\n\n\nFigure 30. Theme files structure.\n\n\n\nBasic custom theme\n\nTo create a new custom theme, the .scss file containing it has to have imported the angular _theming.scss file (angular/material/theming) file and mat-core included. _theming.scss includes multiple color palettes and some functions that we are going to see below. The file for this basic theme is going to be named styles-custom-dark.scss.\n\n\nFirst, declare new variables for primary, accent and warn palettes. Those variables are going to store the result of the function mat-palette.\n\n\nmat-palette accepts four arguments: base color palette, main, lighter and darker variants (See [id_palette_variants]) and returns a new palette including some additional map values: default, lighter and darker ([id_scss_map]). Only the first argument is mandatory.\n\n\nListing 36. File styles-custom-dark.scss.\n\n\n\n\n\nIn this example we are using colors available in _theming.scss: mat-pink, mat-blue, mat-red. If you want to use a custom color you need to define a new map, for instance:\n\n\nListing 37. File styles-custom-dark.scss custom pink.\n\n\n\n\n\n\n\n\nTip\n\n\nSome pages allows to create these palettes easily, for instance: http://mcg.mbitson.com\n\n\n\n\n\nUntil now, we just have defined primary, accent and warn palettes but what about foreground and background? Angular material has two functions to change both:\n\n\n\n\nmat-light-theme: Receives as arguments primary, accent and warn palettes and return a theme whose foreground is basically black (texts, icons, …​), the background is white and the other palettes are the received ones.\n\n\n\n\n\n\n\nFigure 31. Custom light theme.\n\n\n\n\nmat-dark-theme: Similar to mat-light-theme but returns a theme whose foreground is basically white and background black.\n\n\n\n\n\n\n\nFigure 32. Custom dark theme.\n\n\nFor this example we are going to use mat-dark-theme and save its result in $custom-dark-theme.\n\n\nListing 38. File styles-custom-dark.scss updated with mat-dark-theme.\n\n\n\n\n\nTo apply the saved theme, we have to go to styles.scss and import our styles-custom-dark.scss and include a function called angular-material-theme using the theme variable as argument.\n\n\nListing 39. File styles.scss.\n\n\n\n\n\nIf we have multiple themes it is necessary to add the include statement inside a css class and use it in src/index.html → app-root component.\n\n\nListing 40. File styles.scss updated with custom-dark-theme class.\n\n\n\n\n\nListing 41. File src/index.html.\n\n\n\n\n\nThis will apply $custom-dark-theme theme for the entire application.\n\n\n\nFull custom theme\n\nSometimes it is needed to custom different elements from background and foreground, in those situations we have to create a new function similar to mat-light-theme and mat-dark-theme. Let’s focus con mat-light-theme:\n\n\nListing 42. Source code of mat-light-theme\n\n\n\n\n\nAs we can see, mat-light-theme takes three arguments and returns a map including them as primary, accent and warn color; but there are three more keys in that map: is-dark, foreground and background.\n\n\n\n\nis-dark: Boolean true if it is a dark theme, false otherwise.\n\n\nbackground: Map that stores the color for multiple background elements.\n\n\nforeground: Map that stores the color for multiple foreground elements.\n\n\n\n\nTo show which elements can be colored lets create a new theme in a file styles-custom-cap.scss:\n\n\nListing 43. File styles-custom-cap.scss: Background and foreground variables.\n\n\n\n\n\nFunction which uses the variables defined before to create a new theme:\n\n\nListing 44. File styles-custom-cap.scss: Creating a new theme function.\n\n\n\n\n\nCalling the new function and storing its value in $custom-cap-theme.\n\n\nListing 45. File styles-custom-cap.scss: Storing the new theme.\n\n\n\n\n\nAfter defining our new theme, we can import it from styles.scss.\n\n\nListing 46. File styles.scss updated with custom-cap-theme class.\n\n\n\n\n\n\nMultiple themes and overlay-based components\n\nCertain components (e.g. menu, select, dialog, etc.) that are inside of a global overlay container,require an additional step to be affected by the theme’s css class selector.\n\n\nListing 47. File app.module.ts\n\n\n\n\n\n\n\n"}