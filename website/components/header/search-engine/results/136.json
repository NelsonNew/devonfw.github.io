{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-angular-pwa.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-angular-pwa.asciidoc_sample-application","title":"Sample Application","breadcrumbs":["Angular","Angular","Angular Progressive Web App"],"text":"Sample Application\n\n\n\n\nFigure 33. Basic angular PWA.\n\n\nTo explain how to build PWA using angular, a basic application is going to be built. This app will be able to ask for resources and save in the cache in order to work even offline.\n\n\nStep 1: Create a new project\n\nThis step can be completed with one simple command using the Angular CLI: ng new &lt;name&gt;, where &lt;name&gt; is the name for the app. In this case, the app is going to be named basic-ng-pwa. If you are using Nx CLI, you can use the command nx generate @nrwl/angular:app &lt;name&gt; in your Nx workspace. You can follow this guide if you want to get started with Nx workspace.\n\n\n\nStep 2: Create a service\n\nWeb applications usually uses external resources, making necessary the addition of services which can get those resources. This application gets a dish from My Thai Star’s back-end and shows it. To do so, a new service is going to be created.\n\n\n\n\ngo to project folder: cd basic-ng-pwa. If using Nx, go to the root folder of the workspace.\n\n\nrun ng generate service data. For Nx CLI, specify the project name with --project flag. So the command becomes ng generate service data --project=basic-ng-pwa\n\n\nModify data.service.ts, environment.ts, environment.prod.ts\n\n\n\n\nTo retrieve data with this service, you have to import the module HttpClient and add it to the service’s constructor. Once added, use it to create a function getDishes() that sends HTTP request to My Thai Start’s back-end. The URL of the back-end can be stored as an environment variable MY_THAI_STAR_DISH.\n\n\ndata.service.ts\n\n\n\n\n\n\n\nenvironments.ts\n\n\n\n\n\n\n\nenvironments.prod.ts\n\n\n\n\n\n\n\n\nStep 3: Use the service\n\nThe component AppComponent implements the interface OnInit and inside its method ngOnInit() the subscription to the services is done. When a dish arrives, it is saved and shown (app.component.html).\n\n\n\n\n\n\n\n\nStep 4: Structures, styles and updates\n\nThis step shows code interesting inside the sample app. The complete content can be found in devon4ts-samples.\n\n\nindex.html\n\n\nTo use the Montserrat font add the following link inside the head tag of the app’s index.html file.\n\n\n\n\n\n\n\nstyles.scss\n\n\n\n\n\n\n\napp.component.ts\n\n\nThis file is also used to reload the app if there are any changes.\n\n\n\n\nSwUpdate: This object comes inside the @angular/pwa package and it is used to detect changes and reload the page if needed.\n\n\n\n\n\n\n\n\n\n\nStep 5: Make it Progressive.\n\nInstall Angular PWA package with ng add @angular/pwa --project=&lt;name&gt;. As before substitute name with basic-ng-pwa.\n\n\nThe above command completes the following actions:\n\n\n\n\nAdds the @angular/service-worker package to your project.\n\n\nEnables service worker build support in the CLI.\n\n\nImports and registers the service worker in the app module.\n\n\nUpdates the index.html file:\n\n\n\nIncludes a link to add the manifest.json file.\n\n\nAdds meta tags for theme-color.\n\n\nInstalls icon files to support the installed Progressive Web App (PWA).\n\n\nCreates the service worker configuration file called ngsw-config.json, which specifies the caching behaviors and other settings.\n\n\n\n\n\n\n\nmanifest.json\n\nmanifest.json is a file that allows to control how the app is displayed in places where native apps are displayed.\n\n\nFields\n\n\nname: Name of the web application.\n\n\nshort_name: Short version of name.\n\n\ntheme_color: Default theme color for an application context.\n\n\nbackground_color: Expected background color of the web application.\n\n\ndisplay: Preferred display mode.\n\n\nscope: Navigation scope of this web application’s application context.\n\n\nstart_url: URL loaded when the user launches the web application.\n\n\nicons: Array of icons that serve as representations of the web app.\n\n\nAdditional information can be found here.\n\n\n\nngsw-config.json\n\nngsw-config.json specifies which files and data URLs have to be cached and updated by the Angular service worker.\n\n\nFields\n\n\n\n\nindex: File that serves as index page to satisfy navigation requests.\n\n\nassetGroups: Resources that are part of the app version that update along with the app.\n\n\n\nname: Identifies the group.\n\n\ninstallMode: How the resources are cached (pre-fetch or lazy).\n\n\nupdateMode: Caching behavior when a new version of the app is found (pre-fetch or lazy).\n\n\nresources: Resources to cache. There are three groups.\n\n\n\nfiles: Lists patterns that match files in the distribution directory.\n\n\nurls:  URL patterns matched at runtime.\n\n\n\n\n\n\n\n\ndataGroups: UsefulIdentifies the group. for API requests.\n\n\n\nname: Identifies the group.\n\n\nurls: URL patterns matched at runtime.\n\n\nversion:  Indicates that the resources being cached have been updated in a backwards-incompatible way.\n\n\ncacheConfig: Policy by which matching requests will be cached\n\n\n\nmaxSize: The maximum number of entries, or responses, in the cache.\n\n\nmaxAge: How long responses are allowed to remain in the cache.\n\n\n\nd: days. (5d = 5 days).\n\n\nh: hours\n\n\nm: minutes\n\n\ns: seconds. (5m20s = 5 minutes and 20 seconds).\n\n\nu: milliseconds\n\n\n\n\n\ntimeout: How long the Angular service worker will wait for the network to respond before using a cached response. Same dataformat as maxAge.\n\n\nstrategy: Caching strategies (performance or freshness).\n\n\n\n\n\n\n\n\nnavigationUrls: List of URLs that will be redirected to the index file.\n\n\n\n\nAdditional information can be found here.\n\n\n\n\nStep 6: Configure the app\n\nmanifest.json\n\n\nDefault configuration.\n\n\n&nbsp;\n&nbsp;\n\n\nngsw-config.json\n\n\nAt assetGroups → resources → urls: In this field the google fonts API is added in order to use Montserrat font even without network.\n\n\n\n\n\n\n\nAt the root of the json: A data group to cache API calls.\n\n\n\n\n\n\n\n\nStep 7: Check that your app is a PWA\n\nTo check if an app is a PWA lets compare its normal behavior against itself but built for production. Run in the project’s root folder the commands below:\n\n\nng build --prod to build the app using production settings.(nx build &lt;name&gt; --prod in Nx CLI)\n\n\nnpm install http-server to install an npm module that can serve your built application. Documentation here.\n\n\nGo to the dist/basic-ng-pwa/ folder running cd dist/basic-ng-pwa. In an Nx workspace, the path will be dist/apps/basic-ng-pwa\n\n\nhttp-server -o to serve your built app.\n\n\n\n\n\nFigure 34. Http server running on localhost:8081.\n\n\n&nbsp;\n\n\nIn another console instance run ng serve (or nx serve basic-ng-pwa for Nx) to open the common app (not built).\n\n\n\n\n\nFigure 35. Angular server running on localhost:4200.\n\n\n&nbsp;\n\n\nThe first difference can be found on Developer tools → application, here it is seen that the PWA application (left) has a service worker and the common (right) one does not.\n\n\n\n\n\nFigure 36. Application service worker comparison.\n\n\n&nbsp;\n\n\nIf the \"offline\" box is checked, it will force a disconnection from network. In situations where users do not have connectivity or have a slow, one the PWA can still be accessed and used.\n\n\n\n\n\nFigure 37. Offline application.\n\n\n&nbsp;\n\n\nFinally, browser extensions like Lighthouse can be used to test whether an application is progressive or not.\n\n\n\n\n\nFigure 38. Lighthouse report.\n\n\n\n\n\n\n"}