{"type":"doc","filename":"devonfw-guide_ide.wiki_LICENSE.asciidoc.html","anchor":"devonfw-guide_devon4j.wiki_guide-configuration-mapping.asciidoc_mapping-advanced-configuration","title":"Mapping advanced configuration","breadcrumbs":["devonfw-ide","Support","License"],"text":"Mapping advanced configuration\n\nHowever, in many scenarios you will have features that require more than just one property.\nInjecting those via @Value is not leading to good code quality.\nInstead we create a class with the suffix ConfigProperties containing all configuration properties for our aspect that is annotated with @ConfigurationProperties:\n\n\n\n\n\n\n\nOf course this is just an example to demonstrate this feature of spring-boot.\nIn order to send emails you would typically use the existing spring-email feature.\nBut as you can see this allows us to define and access our configuration in a very structured and comfortable way.\nThe annotation @ConfigurationProperties(prefix = \"myapp.billing.service\") will automatically map spring configuration properties starting with myapp.billing.service via the according getters and setters into our BillingServiceConfigProperties.\nWe can easily define defaults (e.g. 25 as default value for myapp.billing.service.smtp.port).\nAlso Email or Smtp could be top-level classes to be reused in multiple configurations.\nOf course you would also add helpful JavaDoc comments to the getters and classes to document your configuration options.\nFurther to access this configuration, we can use standard dependency-injection:\n\n\n\n\n\n\n\nFor very generic cases you may also use Map&lt;String, String&gt; to map any kind of property in an untyped way.\nAn example for generic configuration from devon4j can be found in\nServiceConfigProperties.\n\n\nFor further details about this feature also consult Guide to @ConfigurationProperties in Spring Boot.\n\n\n\n"}