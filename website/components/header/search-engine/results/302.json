{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_architecture.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_architecture.asciidoc_overview","title":"Overview","breadcrumbs":["Angular","Architecture","Architecture"],"text":"Overview\n\nWhen using Angular the web client architecture is driven by the framework in a certain way Google and the Angular community think about web client architecture.\nAngular gives an opinion on how to look at architecture.\nIt is a component based like devon4j but uses different terms which are common language in web application development.\nThe important term is module which is used instead of component. The primary reason is the naming collision with the Web Components standard (see Web Components).\nTo clarify this:\n\n\n\n\nA component describes an UI element containing HTML, CSS and JavaScript - structure, design and logic encapsulated inside a reusable container called component.\n\n\nA module describes an applications feature area. The application flight-app may have a module called booking.\n\n\n\n\nAn application developed using Angular consists of multiple modules.\nThere are feature modules and special modules described by the Angular Style Guide - core and shared.\nAngular or Angular Style Guide give no guidance on how to structure a module internally.\nThis is where this architecture comes in.\n\n\nLayers\n\nThe architecture describes two layers. The terminology is based on common language in web development.\n\n\n\n\n\nFigure 8. Layers\n\n\n\n\nComponents Layer encapsulates components which present the current application state.\nComponents are separated into Smart and Dumb Components.\nThe only logic present is view logic inside Smart Components.\n\n\nServices Layer is more or less what we call 'business logic layer' on the server side.\nThe layer defines the applications state, the transitions between state and classic business logic.\nStores contain application state over time to which Smart Components subscribe to.\nAdapters are used to perform XHR, WebSocket connections, etc.\nThe business model is described inside the module.\nUse case services perform business logic needed for use cases.\nA use case services interacts with the store and adapters.\nMethods of use case services are the API for Smart Components.\nThose methods are Actions in reactive terminology.\n\n\n\n\n\nModules\n\nAngular requires a module called app which is the main entrance to an application at runtime - this module gets bootstrapped.\nAngular Style Guide defines feature modules and two special modules - core and shared.\n\n\n\n\n\nFigure 9. Modules\n\n\nA feature module is basically a vertical cut through both layers.\nThe shared module consists of components shared across feature modules.\nThe core module holds services shared across modules.\nSo core module is a module only having a services layer\nand shared module is a module only having a components layer.\n\n\n\n\n\n\n"}