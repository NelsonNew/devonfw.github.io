{"type":"doc","filename":"devon4net.wiki_devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_deperecated-packages","title":"Deperecated packages","breadcrumbs":[".net","Packages","Packages"],"text":"Deperecated packages\n\ndevon4Net.Domain.Context\n\nDescription\n\ndevon4Net.Domain.Context contains the extended class devon4NetBaseContext in order to make easier the process of having a model context configured against different database engines. This configuration allows an easier testing configuration against local and in memory databases.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nAdd to appsettings.{environment}.json file your database connections:\n\n\n\n\n\n\n\n\n\n\n\nOn Startup.cs :\n\n\n\n\n\n\n\n\n\n\n\nAdd your database connections defined on previous point:\n\n\n\n\n\n\n\n\n\n\n\nOn devon4Net.Application.Configuration.Startup/DataBaseConfiguration/ConfigureDataBase configure your connections.\n\n\n\n\n\n\ndevon4Net.Infrastructure.ApplicationUser\n\nDescription\n\ndevon4Net Application user classes to implement basic Microsoft’s basic authentication in order to be used on authentication methodologies such Jason Web Token (JWT).\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nAdd the database connection string for user management on appsettings.{environment}.json:\n\n\n\n\n\n\n\n\n\n\n\nAdd the following line of code\n\n\n\n\n\n\n\n\n\nOn\n\n\n\n\n\n\n\nor on:\n\n\n\n\n\n\n\n\n\nAdd the data seeder on Configure method on start.cs class:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nYou can use the following methods to set up the database configuration:\n\n\n\n\n\n\n\n\n\n\n\nThe method AddApplicationUserDbContextInMemoryService uses the AuthContext connection string name to set up the database.\n\n\nThis component is used with the components devon4Net.Infrastructure.JWT and devon4Net.Infrastructure.JWT.MVC.\n\n\n\n\n\n\ndevon4Net.Infrastructure.Communication\n\nDescription\n\nBasic client classes to  invoke` GET`/POST methods asynchronously. This component has the minimal classes to send basic data. For more complex operations please use ASP4Net.Infrastructure.Extensions.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nCreate an instance of RestManagementService class.\n\n\nUse next methods to use GET/POST basic options:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nExample:\n\n\n\n\n\n\n\n\n\n\n\ndevon4Net.Infrastructure.JWT.MVC\n\nDescription\n\n\n\ndevon4Net Extended controller to interact with  JWT features\n\n\n\n\n\nConfiguration\n\n\n\nExtend your _ Microsoft.AspNetCore.Mvc.Controller_ class with devon4NetJWTController class:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nIn order to generate a  JWT, you should implement the  JWT generation on user login. For example, in My Thai Star is created as follows:\n\n\n\n\n\n\n\n\n\n\n\nIn My Thai Star the  JWT will contain the user information such id, roles…​\n\n\nOnce you extend your controller with devon4NetJWTController you will have available these methods to simplify user management:\n\n\n\n\n\n\n\n\n\n\n\ndevon4Net.Infrastructure.MVC\n\nDescription\n\nCommon classes to extend controller functionality on API. Also provides support for paged results in devon4Net applications and automapper injected class.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nThe generic class ResultObjectDto&lt;T&gt; provides a typed result object with pagination.\n\n\nThe extended class provides the following methods:\n\n\n\n\n\n\n\n\n\n\n\nGenerateResultDto provides typed ResultObjectDto object or a list of typed ResultObjectDto object. The aim of this methods is to provide a clean management for result objects and not repeating code through the different controller classes.\n\n\nThe following sample from My Thai Star shows how to use it:\n\n\n\n\n\n\n\n\n\n\n\ndevon4Net.Infrastructure.AOP\n\nDescription\n\nSimple AOP Exception handler for .Net Controller classes integrated with Serilog.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\nAdd this line of code on ConfigureServices method on Startup.cs\n\n\n\n\n\n\n\n\nNotes\n\nNow automatically your exposed API methods exposed on controller classes will be tracked on the methods:\n\n\n\n\nOnActionExecuting\n\n\nOnActionExecuted\n\n\nOnResultExecuting\n\n\nOnResultExecuted\n\n\n\n\nIf an exception occurs, a message will be displayed on log with the stack trace.\n\n\n\n\ndevon4Net.Infrastructure.Cors\n\nDescription\n\nEnables CORS configuration for devon4Net application. Multiple domains can be configured from configuration. Mandatory to web clients (p.e. Angular) to prevent making AJAX requests to another domain.\n\n\nCross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell a browser to let a web application running at one origin (domain) have permission to access selected resources from a server at a different origin. A web application makes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, and port) than its own origin.\n\n\nPlease refer to this link to get more information about CORS and .Net core.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nYou can configure your Cors configuration on appsettings.{environment}.json:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you specify the cors configuration as empty array, a default cors-policy will be used with all origins enabled:\n\n\n\n\n\n\n\n\n\n\n\nOn the other hand, you can specify different Cors policies in your solution as follows:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nTo use CORS in your API methods, use the next notation:\n\n\n\n\n\n\n\n\n\n\n\nif you want to disable the CORS check use the following annotation:\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}