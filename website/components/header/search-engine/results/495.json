{"type":"doc","filename":"devonfw-guide_devon4node.wiki_devon4node-architecture.asciidoc_http-layer.html","anchor":"devonfw-guide_devon4node.wiki_devon4node-architecture.asciidoc_http-layer","title":"HTTP layer","breadcrumbs":["NodeJS","devon4node Architecture","HTTP layer"],"text":"HTTP layer\n\nBy using NestJS, devon4node is a platform-agnostic framework. NestJS focuses only on the logical layer, and delegates the transport layer to another framework, such as ExpressJS. You can see it in the following diagram:\n\n\n\n\n\n\n\nAs you can see, NestJS do not listen directly for incoming request. It has an adapter to communicate with ExpressJS and ExpressJS is the responsible for that. ExpressJS is only one of the frameworks that NestJS can work with. We have also another adapter available out-of-the-box: the Fastify adapter. With that, you can replace ExpressJS for Fastify But you can still use all your NestJS components. You can also create your own adapter to make NestJS work with other HTTP framework.\n\n\nAt this point, you may think: why is NestJS (and devon4node) using ExpressJS by default instead of Fastify? Because, as you can see in the previous diagram, there is a component that is dependent on the HTTP framework: the middleware. As ExpressJS is the most widely used framework, there exists a lot of middleware for it, so, in order to reuse them in our NestJS applications, NestJS use ExpressJS by default. Anyway, you may think which HTTP framework best fits your requirements.\n\n\n\n"}