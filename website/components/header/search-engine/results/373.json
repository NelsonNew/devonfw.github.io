{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-cypress.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-cypress.asciidoc_request--route","title":"Request / Route","breadcrumbs":["Angular","Cookbook","Testing e2e with Cypress"],"text":"Request / Route\n\nWith cypress you can test your application with real data or with mocks.\n\n\nNot using mocks guarantees that your tests are real e2e test but makes them vulnerable to external issues.\nWhen you mock data you donâ€™t know exactly if the data and the structure received from the backend is correct because you are forcing a mock on the response, but you can avoid external issues, run test faster and have better control on the structure and status.\n\n\nTo get more information go to Testing Strategies\n\n\nRoute\n\nCypress can intercept a XHR request and interact with it.\n\n\n\n\n\n\n\ncy.server(options) start a server to interact with the responses.\n\n\ncy.route(options) intercepts a XMLHttpRequests\n\n\nmethod GET\n\n\nURL /apiUrl/list'\n\n\nresponse [{\"name\":\"apple\", \"units\":3},{\"name\":\"kiwi\", \"units\":2}]\n\n\n\n\nWaits\n\n\nEvery cypress action has a default await time to avoid asynchronous issues, but this time can be short for some particular actions like API calls, for those cases we can use cy.wait().\n\n\n\n\n\n\n\nYou can find more information about cy.wait() here\n\n\nTo mock data with fixtures:\n\n\n\n\n\n\n\nWe get boxFruit data from the box fixture and then we mock the API call with it so now the response of the call is boxFruit object.\nWhen the button is clicked, it waits to receive the response of the call and then checks if the list contains one of the elements of the fruitBox.\n\n\n\nRequest\n\nMake a HTTP request.\n\n\n\n\n\n\n\nIf we have 'http://localhost:4200' as baseUrl on cypress.json\n\n\n\n\n\n\n\nWe can add other options, like we can send the body of a form.\n\n\n\n\n\n\n\n\n\n"}