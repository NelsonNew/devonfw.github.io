{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-file-structure.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-file-structure.asciidoc_components-layer","title":"Components Layer","breadcrumbs":["Angular","Angular","File Structure"],"text":"Components Layer\n\nThe component layer reflects the distinction between Smart Components and Dumb Components.\n\n\nListing 68. Components layer file structure shows Smart Components on top-level\n\n\n\n\n\nEvery folder inside the /components folder represents a smart component. The only exception is /shared.\n/shared contains Dumb Components shared across Smart Components inside the components layer.\n\n\nListing 69. Smart components contain Dumb components\n\n\n\n\n\nInside the folder of a Smart Component the component is defined.\nBesides that are folders containing the Dumb Components the Smart Component consists of.\nThis can be recursive - a Dumb Component can consist of other Dumb Components.\nThis is reflected by the file structure as well. This way the structure of a view becomes very readable.\nAs mentioned before, if a Dumb Component is used by multiple Smart Components inside the components layer\nit is put inside the /shared folder inside the components layer.\n\n\nWith this way of thinking the shared module makes a lot of sense. If a Dumb Component is used by multiple Smart Components\nfrom different feature modules, the Dumb Component is placed into the shared module.\n\n\nListing 70. The shared module contains Dumb Components shared across Smart Components from different feature modules\n\n\n\n\n\nThe layer folder /components is not necessary inside the shared module.\nThe shared module only contains components!\n\n\n\n\n\n"}