{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_components-layer.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_components-layer.asciidoc_interaction-of-smart-and-dumb-components","title":"Interaction of Smart and Dumb Components","breadcrumbs":["Angular","Layers","Components Layer"],"text":"Interaction of Smart and Dumb Components\n\nWith the usage of the Smart and Dumb Components pattern one of the most important part is component interaction.\nAngular comes with built in support for component interaction with @Input() and @Output() Decorators.\nThe following figure illustrates an unidirectional data flow.\n\n\n\n\nData always goes down the component tree - from a Smart Component down its children.\n\n\nEvents bubble up, to be handled by a Smart Component.\n\n\n\n\n\n\n\nFigure 11. Smart and Dumb Component Interaction\n\n\nAs shown a Dumb Components role is to define a signature by declaring Input and Output Bindings.\n\n\n\n\n@Input() defines what data is necessary for that component to work\n\n\n@Output() defines which events can be listened on by the parent component\n\n\n\n\nListing 31. Dumb Components define a signature\n\n\n\n\n\nThe example shows the Dumb Component ValuePickerComponent.\nIt describes seven input bindings with isChunked, showHeader and showDropdownHeader being non mandatory as they have a default value.\nFour output bindings are present. Typically, a Dumb Component has very little code to no code inside the TypeScript class.\n\n\nListing 32. Smart Components use the Dumb Components signature inside the template\n\n\n\n\n\nInside the Smart Components template the events emitted by Dumb Components are handled.\nIt is a good practice to name the handlers with the prefix on* (e.g. onInputChanged()).\n\n\n\n\n\n"}