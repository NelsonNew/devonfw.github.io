{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-npm-yarn-workflow.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-npm-yarn-workflow.asciidoc_introduction","title":"Introduction","breadcrumbs":["Angular","Guides","Package Managers Workflow"],"text":"Introduction\n\nThis document aims to provide you the necessary documentation and sources in order to help you understand the importance of dependencies between packages.\n\n\nProjects in NodeJS make use of modules, chunks of reusable code made by other people or teams. These small chunks of reusable code are called packages [1]. Packages are used to solve specific problems or tasks. These relations between your project and the external packages are called dependencies.\n\n\nFor example, imagine we are doing a small program that takes your birthday as an input and tells you how many days are left until your birthday. We search in the repository if someone has published a package to retrieve the actual date and manage date types, and maybe we could search for another package to show a calendar, because we want to optimize our time, and we wish the user to click a calendar button and choose the day in the calendar instead of typing it.\n\n\nAs you can see, packages are convenient. In some cases, they may be even needed, as they can manage aspects of your program you may not be proficient in, or provide an easier use of them.\n\n\nFor more comprehensive information visit npm definition\n\n\nPackage.json\n\nDependencies in your project are stored in a file called package.json. Every package.json must contain, at least, the name and version of your project.\n\n\nPackage.json is located in the root of your project.\n\n\n\n\n\nImportant\n\n\nIf package.json is not on your root directory refer to Problems you may encounter section\n\n\n\n\n\nIf you wish to learn more information about package.json, click on the following links:\n\n\n\n\nYarn Package.json\n\n\nnpm Package.json\n\n\n\n\nContent of package.json\n\nAs you noticed, package.json is a really important file in your project. It contains essential information about our project, therefore you need to understand what’s inside.\n\n\nThe structure of package.json is divided in blocks, inside the first one you can find essential information of your project such as the name, version, license and optionally some Scripts.\n\n\n\n\n\n\n\nThe next block is called dependencies and contains the packages that project needs in order to be developed, compiled and executed.\n\n\n\n\n\n\n\nAfter dependencies we find devDependencies, another kind of dependencies present in the development of the application but unnecessary for its execution. One example is typescript. Code is written in typescript, and then, transpiled to JavaScript. This means the application is not using typescript in execution and consequently not included in the deployment of our application.\n\n\n\n\n\n\n\nHaving a peer dependency means that your package needs a dependency that is the same exact dependency as the person installing your package\n\n\n\n\n\n\n\nOptional dependencies are just that: optional. If they fail to install, Yarn will still say the install process was successful.\n\n\n\n\n\n\n\nFinally you can have bundled dependencies which are packages bundled together when publishing your package in a repository.\n\n\n\n\n\n\n\nHere is the link to an in-depth explanation of dependency types​.\n\n\n\nScripts\n\nScripts are a great way of automating tasks related to your package, such as simple build processes or development tools.\n\n\nFor example:\n\n\n\n\n\n\n\nYou can run that script by running the command yarn (run) script or npm run script, check the example below:\n\n\n\n\n\n\n\nThere are special reserved words for scripts, like pre-install, which will execute the script automatically\nbefore the package you install are installed.\n\n\nCheck different uses for scripts in the following links:\n\n\n\n\nYarn scripts documentation\n\n\nnpm scripts documentation\n\n\n\n\nOr you can go back to\nContent of package.json​.\n\n\n\n\nManaging dependencies\n\nIn order to manage dependencies we recommend using package managers in your projects.\n\n\nA big reason is their usability. Adding or removing a package is really easy, and by doing so, packet manager update the package.json and copies (or removes) the package in the needed location, with a single command.\n\n\nAnother reason, closely related to the first one, is reducing human error by automating the package management process.\n\n\nTwo of the package managers you can use in NodeJS projects are \"yarn\" and \"npm\". While you can use both, we encourage you to use only one of them while working on projects. Using both may lead to different dependencies between members of the team.\n\n\nnpm\n\nWe’ll start by installing npm following this small guide here.\n\n\nAs stated on the web, npm comes inside of NodeJS, and must be updated after installing NodeJS, in the same guide you used earlier are written the instructions to update npm.\n\n\nHow npm works\n\n\nIn order to explain how npm works, let’s take a command as an example:\n\n\n\n\n\n\n\nThis command tells npm to look for the packages @angular/material and @angular/cdk in the npm registry, download and decompress them in the folder node_modules along with their own dependencies. Additionally, npm will update package.json and create a new file called package-lock.json.\n\n\nAfter initialization and installing the first package there will be a new folder called node_modules in your project. This folder is where your packages are unzipped and stored, following a tree scheme.\n\n\nTake in consideration both npm and yarn need a package.json in the root of your project in order to work properly. If after creating your project don’t have it, download again the package.json from the repository or you’ll have to start again.\n\n\nBrief overview of commands\n\n\nIf we need to create a package.json from scratch, we can use the command init. This command asks the user for basic information about the project and creates a brand new package.json.\n\n\n\n\n\n\n\nInstall (or i) installs all modules listed as dependencies in package.json locally. You can also specify a package, and install that package. Install can also be used with the parameter -g, which tells npm to install the Global package.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nEarlier versions of npm did not add dependencies to package.json unless it was used with the flag --save, so npm install package would be npm install --save package, you have one example below.\n\n\n\n\n\n\n\n\n\n\nNpm needs flags in order to know what kind of dependency you want in your project, in npm you need to put the flag -D or --save-dev to install devDependencies, for more information consult the links at the end of this section.\n\n\n\n\n\n\n\n​\n\n\nThe next command uninstalls the module you specified in the command.\n\n\n\n\n\n\n\nls command shows us the dependencies like a nested tree, useful if you have few packages, not so useful when you need a lot of packages.\n\n\n\n\n\n\n\n\n\n\n\n\nexample tree\nWe recommend you to learn more about npm commands in the following link, navigating to the section CLI commands.\n\n\nAbout Package-lock.json\n\n\nPackage-lock.json describes the dependency tree resulting of using package.json and npm.\nWhenever you update, add or remove a package, package-lock.json is deleted and redone with\nthe new dependencies.\n\n\n\n\n\n\n\nThis lock file is checked every time the command npm i (or npm install) is used without specifying a package,\nin the case it exists and it’s valid, npm will install the exact tree that was generated, such that subsequent\ninstalls are able to generate identical dependency trees.\n\n\n\n\n\nWarning\n\n\nIt is not recommended to modify this file yourself. It’s better to leave its management to npm.\n\n\n\n\n\nMore information is provided by the npm team at package-lock.json\n\n\n\nYarn\n\nYarn is an alternative to npm, if you wish to install yarn follow the guide getting started with yarn and download the correct version for your operative system. NodeJS is also needed you can find it here.\n\n\nWorking with yarn\n\n\nYarn is used like npm, with small differences in syntax, for example npm install module is changed to yarn add module.\n\n\n\n\n\n\n\nThis command is going to download the required packages, modify package.json, put the package in the folder node_modules and makes a new yarn.lock with the new dependency.\n\n\nHowever, unlike npm, yarn maintains a cache with packages you download inside. You don’t need to download every file every time you do a general installation. This means installations faster than npm.\n\n\nSimilarly to npm, yarn creates and maintains his own lock file, called yarn.lock. Yarn.lock gives enough information about the project for dependency tree to be reproduced.\n\n\nyarn commands\n\n\nHere we have a brief description of yarn’s most used commands:\n\n\n\n\n\n\n\nAdds a package locally to use in your package. Adding the flags --dev or -D will add them to devDependencies instead of the default dependencies, if you need more information check the links at the end of the section.\n\n\n\n\n\n\n\nInitializes the development of a package.\n\n\n\n\n\n\n\nInstalls all the dependencies defined in a package.json file, you can also write \"yarn\" to achieve the same effect.\n\n\n\n\n\n\n\nYou use it when you wish to remove a package from your project.\n\n\n\n\n\n\n\nInstalls the Global package.\n\n\nPlease, refer to the documentation to learn more about yarn commands and their attributes: yarn commands\n\n\nyarn.lock\n\n\nThis file has the same purpose as Package-lock.json, to guide the packet manager, in this case yarn,\nto install the dependency tree specified in yarn.lock.\n\n\nYarn.lock and package.json are\nessential files when collaborating in a project more co-workers and may be a\nsource of errors if programmers do not use the same manager.\n\n\nYarn.lock follows the same structure as package-lock.json, you can find an example of dependency below:\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nAs with package-lock.json, it’s strongly not advised to modify this file. Leave its management to yarn\n\n\n\n\n\nYou can learn more about yarn.lock here: yarn.lock\n\n\n\nGlobal package\n\nGlobal packages are packages installed in your operative system instead of your local project,\nglobal packages useful for developer tooling that is not part of any individual project but instead is used for local commands.\n\n\nA good example of global package is @angular/cli, a command line interface for angular used in our projects. You can install\na global package in npm with \"npm install -g package\" and \"yarn global add package\" with yarn, you have a npm example below:\n\n\nListing 36. npm global package\n\n\n\n\n\nGlobal npm\nGlobal yarn\n\n\n\nPackage version\n\nDependencies are critical to the success of a package. You must be extra careful about\nwhich version packages are using, one package in a different version may break your code.\n\n\nVersioning in npm and yarn, follows a semantic called semver, following the logic\nMAJOR.MINOR.PATCH, like for example, @angular/animations: 4.4.6.\n\n\nDifferent versions\n\n\nSometimes, packages are installed with a different version from the one initially installed.\nThis happens because package.json also contains the range of versions we allow yarn or npm to\ninstall or update to, example:\n\n\n\n\n\n\n\nAnd here the installed one:\n\n\n\n\n\n\n\nAs you can see, the version we initially added is 4.2.4, and the version finally installed after\na global installation of all packages, 4.4.6.\n\n\nInstalling packages without package-lock.json or yarn.lock using their respective packet managers, will always\nend with npm or yarn installing the latest version allowed by package.json.\n\n\n\"@angular/animations\": \"^4.2.4\" contains not only the version we added, but also the range we allow npm and yarn\nto update. Here are some examples:\n\n\n\n\n\n\n\nThe version installed must be lower than 4.2.4 .\n\n\n\n\n\n\n\nThe version installed must be greater than or equal to 4.2.4 .\n\n\n\n\n\n\n\nthe version installed must be equal to 4.2.4 .\n\n\n\n\n\n\n\nThe version installed cannot modify the first non zero digit, for example in this case\nit cannot surpass 5.0.0 or be lower than 4.2.4 .\n\n\nYou can learn more about this in Versions\n\n\n\n\nProblems you may encounter\n\nIf you can’t find package.json, you may have deleted the one you had previously,\nwhich means you have to download the package.json from the repository.\nIn the case you are creating a new project you can create a new package.json. More information\nin the links below. Click on Package.json if you come from that section. \n\n\n\n\nCreating new package.json in yarn\n\n\nCreating new package.json in npm\n\n\n\n\n\n\n\nImportant\n\n\nUsing npm install or yarn without package.json in your projects will\nresult in compilation errors. As we mentioned earlier,\nPackage.json contains essential information about your project.\n\n\n\n\n\nIf you have package.json, but you don’t have package-lock.json or yarn.lock the use of\ncommand \"npm install\" or \"yarn\"  may result in a different dependency tree.\n\n\nIf you are trying to import a module and visual code studio is not able to find it,\nis usually caused by error adding the package to the project, try to add the module again with yarn or npm,\nand restart Visual Studio Code.\n\n\nBe careful with the semantic versioning inside your package.json of the packages,\nor you may find a new update on one of your dependencies breaking your code.\n\n\n\n\n\nTip\n\n\nIn the following link\nthere is a solution to a problematic update to one package.\n\n\n\n\n\nA list of common errors of npm can be found in: npm errors\n\n\nRecomendations\n\nUse yarn or npm in your project, reach an agreement with your team in order to choose one, this will avoid\nundesired situations like forgetting to upload an updated yarn.lock or package-lock.json.\nBe sure to have the latest version of your project when possible.\n\n\n\n\n\nTip\n\n\nPull your project every time it’s updated. Erase your node_modules folder and reinstall all\ndependencies. This assures you to be working with the same dependencies your team has.\n\n\n\n\n\nAD Center recommends the use of yarn.\n\n\n\n\n\n\n\n"}