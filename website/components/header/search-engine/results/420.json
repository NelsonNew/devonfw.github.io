{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-ngrx-entity.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-ngrx-entity.asciidoc","title":"Simplifying CRUD with NgRx/Entity","breadcrumbs":["Angular","NgRx","Simplifying CRUD with NgRx/Entity"],"text":"Simplifying CRUD with NgRx/Entity\n\nMost of the time when manipulating entries in the store, we like to create, add, update, or delete entries (CRUD). NgRx/Entity provides convenience functions if each item of a collection has an id property. Luckily all our entities already have this property.\n\n\nLet’s add functionality to add a movie to the watchlist. First, create the required action:\n\n\nrecommendation/actions/index.ts\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou may wonder why the Date object is not created inside the reducer instead, since it should always be the current time. However, remember that reducers should be deterministic state machines — State A + Action B should always result in the same State C. This makes reducers easily testable.\n\n\n\n\n\n\nThen, rewrite the watchlistData reducer to make use of NgRx/Entity:\n\n\nrecommendation/actions/index.ts\n\n\n\n\n\n\n\n\n\nNgRx/Entity requires state to extend EntityState. It provides a list of ids and a dictionary of id ⇒ entity entries\n\n\nThe entity adapter provides data manipulation operations and selectors\n\n\nThe state can be initialized with getInitialState(), which accepts an optional object to define any additional state beyond EntityState\n\n\nselectAll returns an array of all entities\n\n\nAll adapter operations consume the state object as the last argument and produce a new state\n\n\nUpdate methods accept a partial change definition; you don’t have to clone the object\n\n\n\n\nThis concludes the tutorial on NgRx. If you want to learn about advanced topics such as selectors with arguments, testing, or router state, head over to the official NgRx documentation.\n\n\n\n"}