{"type":"doc","filename":"asciidoc_devonfw-guide_my-thai-star.wiki_master-my-thai-star.asciidoc_client-side_4.html","anchor":"devonfw-guide_my-thai-star.wiki_angular-testing.asciidoc","title":"Angular testing","breadcrumbs":["MyThaiStar","Testing","Client Side"],"text":"Angular testing\n\n\n\n\n\n\nMyThaiStar testing is made using Angular default testing environment and syntax language: Karma and Jasmine\n\n\nTo test an element of the application, you indicate that tests are a special type of files with the extension .spec.ts, then, in MyThaiStar angular/CLI config you can notice that there is an array with only one entry, Karma, with at the same time has one entry to Karma.config.js.\n\n\nIn the configuration of Karma we indicate which syntax language we are going to use (currently Jasmine as said before) between some other configurations, it is remarkable the last one: browsers. By default, the only available browser is chrome, that is because Karma works opening a chrome view to run all the tests, in that same window, Karma shows the result or errors of the test run. But we can add some other browser to adjust to our necessities, for example, in some automatic processes that run from console, it is not an option to open a chrome window, in that case, MyThaiStar used PhantomJS and ChromeHeadless.\n\n\nTaking all of this into account, to run the test in MyThaiStar we need to move to project root folder and run this command : ng test --browser &lt;browser&gt;\n\n\n\n\n\n\n\n\n\nIf you run just ng test it will run the three browser options simultaneously, giving as a result three test runs and outputs, it can cause timeouts and unwanted behaviors, if you want a shortcut to run the test with chrome window you can just run yarn test so we really encourage to not use just ng test.\n\n\n\n\n\n\nHere we are going to see how Client side testing of MyThaiStar has been done.\n\n\nTesting Components\n\nAngular components were created using angular/CLI ng create component so they already come with an spec file to test them. The only thing left to do is to add the providers and imports needed in the component to work as the component itself, once this is done, the most basic test is to be sure that all the dependencies and the component itself can be correctly created.\n\n\nAs an example, this is the spec.ts of the menu view component:\n\n\n\n\n\n\n\nFirst we declare the component to be tested and a Fixture object, then, we configure the testingModule right in the same way we could configure the MenuModule with the difference here that tests always have to use the mock back-end because we do not want to really depend on a server to test our components.\n\n\nOnce configured the test module, we have to prepare the context of the test, in this case we create the component, that is exactly what is going on in the beforeEach() function.\n\n\nFinally, we are ready to use the component and itâ€™s fixture to check if the component has bee correctly created.\n\n\nAt this moment this is the case for most of the components, in the future, some work would be applied on this matter to have a full testing experience in MyThaiStar components.\n\n\nDialog components\n\nDialog components are in a special category because they can not be tested normally. In the way Material implements the opening of dialogs, you have to create a component that will load into a dialog, to tell the module to load this components when needed, they have to be added into a special array category: EntryComponents. So, to test them, we need to import them in the test file as well.\n\n\nAlso, the testing code to open the component is a bit different too:\n\n\n\n\n\n\n\nThat is right, the beforeEach() function is slightly different from the the example above, in this case we have to force to the test to know that the component is only displayed in a dialog, so we have to open a dialog with this component in order to access it.\n\n\n\n\nTesting Services\n\nAs well as components, services can be tested too, actually, they are even more necessary to be tested because they have inside more complex logic and data management.\n\n\nAs an example of testing services i am going to use a well done services, with a specific purpose and with its logic completely tested, the price-calculator service:\n\n\n\n\n\n\n\nIn services test, we have to inject the service in order to use it, then we can define some initializing contexts to test if the functions of the services returns the expected values, in the example we can see how an imaginary order is created and expected the function getPrice() to correctly calculate the price of that order.\n\n\nIn this same test file you can find some more test regarding all the possibilities of use in that services: orders with and without extras, single order, multiple orders and so on.\n\n\nSome services as well as the components have only tested that they are correctly created and they dependencies properly injected, in the future, will be full covering regarding this services test coverage.\n\n\n\nTesting in a CI environment\n\n\n\n\n"}