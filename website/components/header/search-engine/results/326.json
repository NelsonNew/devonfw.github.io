{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-accessibility.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-accessibility.asciidoc_key-concerns-of-accessible-web-applications","title":"Key Concerns of Accessible Web Applications","breadcrumbs":["Angular","Angular","Accessibility"],"text":"Key Concerns of Accessible Web Applications\n\n\n\nSemantic Markup - Allows the application to be understood on a more general level rather than just details of whats being rendered\n\n\nKeyboard Accessibility - Applications must still be usable when using only a keyboard\n\n\nVisual Assistance - color contrast, focus of elements and text representations of audio and events\n\n\n\n\nSemantic Markup\n\nIf you’re creating custom element directives, Web Components or HTML in general, use native elements wherever possible to utilize built-in events and properties. Alternatively, use ARIA to communicate semantic meaning.\n\n\nHTML tags have attributes that providers extra context on what’s being displayed on the browser. For example, the  &lt;img&gt;  tag’s  alt  attribute lets the reader know what is being shown using a short description.However, native tags don’t cover all cases. This is where ARIA fits in. ARIA attributes can provide context on what roles specific elements have in the application or on how elements within the document relate to each other.\n\n\nA modal component can be given the role of dialog or alertdialog to let the browser know that that component is acting as a modal. The modal component template can use the ARIA attributes  aria-labelledby and aria-described to describe to readers what the title and purpose of the modal is.\n\n\n\n\n\n\n\nnotification-button.component.ts\n\n\n\n\n\n\n\n\nKeyboard Accessibility\n\nKeyboard accessibility is the ability of your application to be interacted with using just a keyboard. The more streamlined the site can be used this way, the more keyboard accessible it is. Keyboard accessibility is one of the largest aspects of web accessibility since it targets:\n\n\n\n\nthose with motor disabilities who can’t use a mouse\n\n\nusers who rely on screen readers and other assistive technology, which require keyboard navigation\n\n\nthose who prefer not to use a mouse\n\n\n\n\nFocus\n\nKeyboard interaction is driven by something called focus. In web applications, only one element on a document has focus at a time, and keypress will activate whatever function is bound to that element.\nFocus element border can be styled with CSS using the  outline  property, but it should not be removed. Elements can also be styled using the  :focus  psuedo-selector.\n\n\n\nTabbing\n\nThe most common way of moving focus along the page is through the  tab  key. Elements will be traversed in the order they appear in the document outline - so that order must be carefully considered during development.\nThere is way change the default behavior or tab order. This can be done through the  tabindex  attribute. The  tabindex  can be given the values:\n* less than zero - to let readers know that an element should be focusable but not keyboard accessible\n* 0 - to let readers know that that element should be accessible by keyboard\n* greater than zero - to let readers know the order in which the focusable element should be reached using the keyboard. Order is calculated from lowest to highest.\n\n\n\nTransitions\n\nThe majority of transitions that happen in an Angular application will not involve a page reload. This means that developers will need to carefully manage what happens to focus in these cases.\n\n\nFor example:\n\n\n\n\n\n\n\n\n\n\n"}