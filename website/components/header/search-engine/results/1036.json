{"type":"doc","filename":"devonfw-guide_my-thai-star.wiki_production-line-ci.asciidoc.html","anchor":"devonfw-guide_my-thai-star.wiki_java-ci.asciidoc","title":"Java CI","breadcrumbs":["MyThaiStar","CI/CD","My Thai Star in Production Line"],"text":"Java CI\n\nThe Java server-side of My Thai Star is an devon4j-based application. As long as Maven and a Java 8 are going to be needed, the Pipeline should have those tools available as well.\n\n\nPipeline\n\nThis Pipeline is called MyThaiStar_SERVER_BUILD, and it is located exactly in the same PL instance’s folder than MyThaiStar_FRONTEND_BUILD. Let’s see how the Pipeline’s flow behaves.\n\n\n\n\n\n\n\nCheck those Pipeline stages with more detail:\n\n\n\n\nDeclarative: Checkout SCM\n\nGets the code from https://github.com/devonfw/my-thai-star . This step is not defined directly in our pipeline, but as it is loaded from the repository this step should always be done at the beginning.\n\n\n\nDeclarative: Tool Install\n\nThe My Thai Star application works with JDK11. In this step, if JDK11 is not installed, we install it and then put the JDK folder into PATH.\n\n\n\n\n\n\n\n\nLoading Custom Tools\n\nIn this step we load the tools that can not be loaded in the previous step. As My Thai Star is delivered as docker container, in this step we load docker as custom tool.\n\n\n\n\n\n\n\n\nInstall dependencies\n\nThis step will download all project dependencies.\n\n\n\n\n\n\n\n\nUnit Tests\n\nThis step will execute the project unit test with maven.\n\n\n\n\n\n\n\n\nDependency Checker\n\nExecute the OWASP Dependency Checker in order to validate the project dependencies. It will generate a report that can be used in SonarQube\n\n\n\n\n\n\n\n\nSonarQube analysis\n\nThe code is evaluated using the integrated PL instance’s SonarQube. Also, it will wait for the quality gate status. If the status is failing, the pipeline execution will be stopped.\n\n\n\n\n\n\n\n\nDeliver application into Nexus\n\nStore all artifacts into nexus.\n\n\n\n\n\n\n\n\nCreate the Docker image\n\nCreate the docker image and then publish the image into a docker registry.\n\n\n\n\n\n\nAdjustments\n\nPipeline Environment\n\nIn order to easily reuse the pipeline in other java projects, all variables have been defined in the block environment. All variables have the default values that Production Line uses, so if you’re going to work in production line you won’t have to change anything. Example:\n\n\n\n\n\n\n\nDescription\n\n\n\njava Dir: Relative route to java application. In My Thai Star this is the java/mtsj folder. The actual directory (.) is also allowed.\n\n\n\n\n\n\n\nsonar Env: Name of the SonarQube environment. SonarQube is the default value for PL.\n\n\nglobal Settings Id: The id of the global settings file. MavenSettings is the default value for PL.\n\n\n\n\n\n\n\nmaven Installation: The name of the maven tool. Maven3 is the default value for PL.\n\n\n\n\n\n\n\n\n\n\n\nDistribution management\n\nThe only extra thing that needs to be added to the Java server-side is some information that determines where the artifact of the project is going to be stored in Nexus. This is going to be a section in the main pom.xml file called &lt;distributionManagement&gt;. This section will point to the PL instance’s Nexus. Let’s have a look at it. It’s already configured with the PL default values.\n\n\n\n\n\n\n\n\n\n\n\n\n"}