{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc_testing-concept","title":"Testing Concept","breadcrumbs":["Angular","Angular","Testing"],"text":"Testing Concept\n\nThe following figure shows you an overview of the application architecture divided in testing areas.\n\n\n\n\n\nFigure 46. Testing Areas\n\n\nThere are three areas, which need to be covered by different testing strategies.\n\n\n\n\nComponents:\nSmart Components need to be tested because they contain view logic.\nAlso the interaction with 3rd party components needs to be tested.\nWhen a 3rd party component changes with an upgrade a test will be failing and warn you, that there is something wrong with the new version.\nMost of the time Dumb Components do not need to be tested because they mainly display data and do not contain any logic.\nSmart Components are always tested with Angular Testing Utilities.\nFor example selectors, which select data from the store and transform it further, need to be tested.\n\n\nStores:\nA store contains methods representing state transitions.\nIf these methods contain logic, they need to be tested.\nStores are always tested using Isolated unit tests.\n\n\nServices:\nServices contain Business Logic, which needs to be tested.\nUseCase Services represent a whole business use case.\nFor instance this could be initializing a store with all the data that is needed for a dialog - loading, transforming, storing.\nOften Angular Testing Utilities are the optimal solution for testing UseCase Services, because they allow for an easy stubbing of the back-end.\nAll other services should be tested with Isolated unit tests as they are much easier to write and maintain.\n\n\n\n\n\n"}