{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-routing.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-routing.asciidoc_guards","title":"Guards","breadcrumbs":["Angular","Angular","Routing"],"text":"Guards\n\nGuards are Angular services implemented on routes which determines whether a user can navigate to/from the route. There are examples below which will explain things better. We have the following types of Guards:\n\n\n\n\nCanActivate: It is used to determine whether a user can visit a route. The most common scenario for this guard is to check if the user is authenticated. For example, if we want only logged in users to be able to go to a particular route, we will implement the CanActivate guard on this route.\n\n\nCanActivateChild: Same as above, only implemented on child routes.\n\n\nCanDeactivate: It is used to determine if a user can navigate away from a route. Most common example is when a user tries to go to a different page after filling up a form and does not save/submit the changes, we can use this guard to confirm whether the user really wants to leave the page without saving/submitting.\n\n\nResolve: For resolving dynamic data.\n\n\nCanLoad: It is used to determine whether an Angular module can be loaded lazily. Example below will be helpful to understand it.\n\n\n\n\nLet’s have a look at some examples.\n\n\nExample 1 - CanActivate and CanActivateChild guards\n\nCanActivate guard\n\nAs mentioned earlier, a guard is an Angular service and services are simply TypeScript classes. So we begin by creating a class. This class has to implement the CanActivate interface (imported from angular/router), and therefore, must have a canActivate function. The logic of this function determines whether the requested route can be navigated to or not. It returns either a Boolean value or an Observable or a Promise which resolves to a Boolean value. If it is true, the route is loaded, else not.\n\n\nListing 75. CanActivate example\n\n\n\n\n\nIn the above example, let’s assume we have a AuthService which has a isLoggedIn() method which returns a Boolean value depending on whether the user is logged in. We use it to return true or false from the canActivate function.\nThe canActivate function accepts two parameters (provided by Angular). The first parameter of type ActivatedRouterSnapshot is the snapshot of the route the user is trying to navigate to (where the guard is implemented); we can extract the route parameters from this instance. The second parameter of type RouterStateSnapshot is a snapshot of the router state the user is trying to navigate to; we can fetch the URL from it’s url property.\n\n\n\n\n\nTip\n\n\nWe can also redirect the user to another page (maybe a login page) if the authService returns false. To do that, inject Router and use it’s navigate function to redirect to the appropriate page.\n\n\n\n\n\nSince it is a service, it needs to be provided in our module:\n\n\nListing 76. provide the guard in a module\n\n\n\n\n\nNow this guard is ready to use on our routes. We implement it where we define our array of routes in the application:\n\n\nListing 77. Implementing the guard\n\n\n\n\n\nAs you can see, the canActivate property accepts an array of guards. So we can implement more than one guard on a route.\n\n\n\nCanActivateChild guard\n\nTo use the guard on nested (children) routes, we add it to the canActivateChild property like so:\n\n\nListing 78. Implementing the guard on child routes\n\n\n\n\n\n\n\nExample 2 - CanLoad guard\n\nSimilar to CanActivate, to use this guard we implement the CanLoad interface and overwrite it’s canLoad function. Again, this function returns either a Boolean value or an Observable or a Promise which resolves to a Boolean value. The fundamental difference between CanActivate and CanLoad is that CanLoad is used to determine whether an entire module can be lazily loaded or not. If the guard returns false for a module protected by CanLoad, the entire module is not loaded.\n\n\nListing 79. CanLoad example\n\n\n\n\n\nAgain, let’s assume we have a AuthService which has a isLoggedIn() method which returns a Boolean value depending on whether the user is logged in. The canLoad function accepts a parameter of type Route which we can use to fetch the path a user is trying to navigate to (using the path property of Route).\n\n\nThis guard needs to be provided in our module like any other service.\n\n\nTo implement the guard, we use the canLoad property:\n\n\nListing 80. Implementing the guard\n\n\n\n\n\n\n\n\n\n"}