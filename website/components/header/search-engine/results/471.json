{"type":"doc","filename":"devonfw-guide_devon4node.wiki_guides-code-generation.asciidoc.html","anchor":"devonfw-guide_devon4node.wiki_guides-code-generation.asciidoc_nest-cli-and-devon4node-schematics","title":"Nest CLI and Devon4node schematics","breadcrumbs":["NodeJS","Guides","Code Generation"],"text":"Nest CLI and Devon4node schematics\n\nWe are going to use the Nest CLI to generate code of our application, you can know more about NodeJs CLI in the official documentation.\n\n\nInstall devon4node schematics\n\nFirst of all, you need to install Nest CLI\n\n\nExecute the command yarn global add @nestjs/cli.\nYou can also use npm: npm install -g @nestjs/cli\n\n\nAnd then Devon4node schematics globally with the following command:\n\n\nyarn global add @devon4node/schematics or npm install -g @devon4node/schematics\n\n\n\n\n\n\n\n\n\nIf you get an error trying execute any devon4node schematic related to collection not found, try to reinstall devon4node/schematics on the project folder or be sure that schematics folder is inside @devon4node in node_modules.\nyarn add @devon4node/schematics\n\n\n\n\n\n\n\nGenerate new devon4node application\n\nTo start creating a devon4node application, execute the command:\n\n\nnest g -c @devon4node/schematics application [application-name]\n\n\nIf you do not put a name, the command line will ask you for one.\n\n\n\nGenerate code for TypeORM\n\nInitialize TypeORM into your current project in a correct way.\n\n\nnest g -c @devon4node/schematics typeorm\n\n\nThen, you will be asked about which DB you want to use.\n\n\n\n\n\n\nGenerate CRUD\n\nGenerate CRUD methods for a entity. Requires TypeORM installed in the project.\n\n\nIt will add the @nestjsx/crud module as a project dependency. Then, generates an entity, a CRUD controller and a CRUD service. It also register the entity, controller and service in the module.\n\n\nExecute nest g -c @devon4node/schematics crud and then you will need to write a name for the crud.\n\n\n\n\n\n\n\n\nGenerate TypeORM entity\n\nAdd a TypeORM entity to your project. Requires TypeORM installed in the project.\n\n\nExecute nest g -c @devon4node/schematics entity and you will be asked for an entity name.\n\n\n\nAdd config-module\n\nAdd the config module to the project.\n\n\nIt will add the @devon4node/common module as a project dependency. Then, it will generate the configuration module into your project and add it in the core module. Also, it generates the config files for the most common environments.\n\n\nThe command to execute will be nest g -c @devon4node/schematics config-module\n\n\n\nAdd mailer module\n\nAdd @devon4node/mailer module to project.\n\n\nIt will add the @devon4node/mailer module as a project dependency. Also, it will add it to the core module and it will generate some email template examples.\n\n\nWrite the command nest g -c @devon4node/schematics mailer\n\n\n\nAdd swagger module\n\nAdd swagger module to project.\n\n\nIt will add the @nestjs/swagger module as a project dependency. Also, it will update the main.ts file in order to expose the endpoint for swagger. The default endpoint is: /v1/api\n\n\nExecute the command nest g -c @devon4node/schematics swagger\n\n\n\nAdd auth-jwt module\n\nAdd the auth JWT module to the project.\n\n\nIt will add to your project the auth-jwt and user module. Also, it will import those modules into the core module.\n\n\nExecute nest g -c @devon4node/schematics auth-jwt\n\n\n\nAdd security\n\nAdd cors and helmet to your project.\n\n\nIt will add helmet package as project dependency and update the main.ts file in order to enable the cors and helmet in your application.\n\n\nExecute nest g -c @devon4node/schematics security\n\n\n\nGenerate database migrations\n\n\n\nGenerate database migrations\n\n\n\nIn order to create migration scripts with TypeORM, you need to install ts-node: yarn global add ts-node or npm i -g ts-node\n\n\nGenerate the tables creation migration: yarn run typeorm migration:generate -n CreateTables\n\n\n\n\n\n\nIt will connect to the database, read all entities and then it will generate a migration file with all sql queries need to transform the current status of the database to the status defined by the entities. If the database is empty, it will generate all sql queries need to create all tables defined in the entities. You can find a example in the todo example\n\n\n\n\n\n\n\n\nAs TypeORM is the tool used for DB. You can check official documentation for more information.\nSee TypeORM CLI documentation.\n\n\n\n\n"}