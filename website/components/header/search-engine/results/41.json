{"type":"doc","filename":"asciidoc_devonfw-guide_my-thai-star.wiki_master-my-thai-star.asciidoc_server-side.html","anchor":"devonfw-guide_my-thai-star.wiki_nodejs-design.asciidoc","title":"NodeJS design (deprecated)","breadcrumbs":["MyThaiStar","Technical design","Server Side"],"text":"NodeJS design (deprecated)\n\nIntroduction\n\nThe NodeJS back-end for My Thai Star application is going to be based on:\n\n\n\n\nExpressJS as the web application framework\n\n\ndevon4node as data access layer framework\n\n\nDynamoDB as NoSQL Database\n\n\n\n\nTo know more details about the above technologies please visit the following documentation:\n\n\n\n\nExpressJS\n\n\ndevon4node\n\n\nDynamoDB\n\n\n\n\n\nBasic architecture details\n\nThis structure can be shown in the following example image:\n\n\n\n\n\n\n\n\n\npublic - All files which be exposed on the server directly\n\n\nsrc\n\n\n\ndatabase folder - Folder with scripts to create/delete/seed the database\n\n\nmodel - Folder with all data model\n\n\nroutes - Folder with all ExpressJS routers\n\n\nutils - Folder with all utils like classes and functions\n\n\napp.ts - File with ExpressJS declaration\n\n\nconfig.ts - File with server configs\n\n\nlogic.ts - File with the business logic\n\n\n\n\n\ntest - Folder with all tests\n\n\n\n\n\nLayers\n\n\n\nService Layer: this layer will expose the REST API to exchange information with the client applications.\n\n\nLogic Layer: the layer in charge of hosting the business logic of the application.\n\n\nData Access Layer: the layer to communicate with the data base.\n\n\n\n\nService layer\n\nThe services layer will be solved using REST services with ExpressJS\n\n\nTo give service to the defined User Stories we will need to implement the following services:\n\n\n\n\nprovide all available dishes.\n\n\nsave a booking.\n\n\nsave an order.\n\n\nprovide a list of bookings (only for waiters) and allow filtering.\n\n\nprovide a list of orders (only for waiters) and allow filtering.\n\n\nlogin service (see the Security section).\n\n\nprovide the current user data (see the Security section)\n\n\n\n\nIn order to be compatible with the other back-end implementations, we must follow the naming conventions proposed for Devon4j applications. We will define the following end points for the listed services.\n\n\n\n\n(POST) /mythaistar/services/rest/dishmanagement/v1/dish/search.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/filter (to filter with fields that does not belong to the Order entity).\n\n\n(POST) /mythaistar/login.\n\n\n(GET) /mythaistar/services/rest/security/v1/currentuser/.\n\n\n\n\nYou can find all the details for the services implementation in the Swagger definition included in the My Thai Star project on Github.\n\n\nTo treat these services separately, the following routers were created:\n\n\n\n\nbookingmanagement: will answer all requests with the prefix /mythaistar/services/rest/bookingmanagement/v1\n\n\ndishmanagement: will answer all requests with the prefix /mythaistar/services/rest/dishmanagement/v1\n\n\nordermanagement: will answer all requests with the prefix /mythaistar/services/rest/ordermanagement/v1\n\n\n\n\nThese routers will define the behavior for each service and use the logical layer.\n\n\nAn example of service definition:\n\n\n\n\n\n\n\n\nLogic layer and Data access layer\n\nIn the logic layer we will locate all the business logic of the application. It will be located in the file logic.ts. If in this layer we need to get access to the data, we make use of data access layer directly, in this case using devon4node with the DynamoDB adapter.\n\n\nExample:\n\n\n\n\n\n\n\nWe could define the data access layer separately, but devon4node allows us to do this in a simple and clear way. So, we decided  to not separate the access layer to the logic business.\n\n\n\n\nSecurity with Json Web Token\n\nFor the Authentication and Authorization the app will implement the json web token protocol.\n\n\nJWT basics\n\nRefer to JWT basics for more information.\n\n\n\nJWT implementation details\n\nThe Json Web Token pattern will be implemented based on the JSON web token library available on npm.\n\n\nAuthentication\n\nBased on the JSON web token approach, we will implement a class Authentication to define the security entry point and filters. Also, as My Thai Star is a mainly public application, we will define here the resources that won’t be secured.\n\n\nList of unsecured resources:\n\n\n\n\n/services/rest/dishmanagement/\\**: to allow anonymous users to see the dishes info in the menu section.\n\n\n/services/rest/ordermanagement/v1/order: to allow anonymous users to save an order. They will need a booking token but they won’t be authenticated to do this task.\n\n\n/services/rest/bookingmanagement/v1/booking: to allow anonymous users to create a booking. Only a booking token is necessary to accomplish this task.\n\n\n/services/rest/bookingmanagement/v1/booking/cancel/\\**: to allow canceling a booking from an email. Only the booking token is needed.\n\n\n/services/rest/bookingmanagement/v1/invitedguest/accept/\\**: to allow guests to accept an invite. Only a guest token is needed.\n\n\n/services/rest/bookingmanagement/v1/invitedguest/decline/\\**: to allow guests to reject an invite. Only a guest token is needed.\n\n\n\n\nTo configure the login we will create an instance of Authentication in the app file and then we will use the method auth for handle the requests to the /login endpoint.\n\n\n\n\n\n\n\nTo verify the presence of the Authorization token in the headers, we will register in the express the Authentication.registerAuthentication middleware. This middleware will check if the token is correct, if so, it will place the user in the request and continue to process it. If the token is not correct it will continue processing the request normally.\n\n\n\n\n\n\n\nFinally, we have two default users created in the database:\n\n\n\n\nuser: waiter\n\n\npassword: waiter\n\n\nrole: WAITER\n\n\nuser: user0\n\n\npassword: password\n\n\nrole: CUSTOMER\n\n\n\n\n\nToken set up\n\nFollowing the official documentation the implementation details for the MyThaiStar’s JWT will be:\n\n\n\n\nSecret: Used as part of the signature of the token, acting as a private key. It can be modified at config.ts file.\n\n\nToken Prefix schema: Bearer. The token will look like Bearer &lt;token&gt;\n\n\nHeader: Authorization. The response header where the token will be included. Also, in the requests, when checking the token it will be expected to be in the same header.\n\n\nThe Authorization header should be part of the Access-Control-Expose-Headers header to allow clients access to the Authorization header content (the token);\n\n\nSignature Algorithm: To encrypt the token we will use the default algorithm HS512.\n\n\n\n\n\nCurrent User request\n\nTo provide to the client with the current user data our application should expose a service to return the user details. In this case the Authentication has a method called getCurrentUser which will return the user data. We only need register it at express.\n\n\n\n\n\n\n\n\nAuthorization\n\nWe need to secure three services, that only should be accessible for users with role Waiter:\n\n\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/filter.\n\n\n\n\nTo ensure this, the Authorization class has the securizedEndpoint method that guarantees access based on the role. This method can be used as middleware in secure services. As the role is included in the token, once validated we will have this information in the request and the middleware can guarantee access or return a 403 error.\n\n\n\n\n\n\n\n\n\n\n\n\n"}