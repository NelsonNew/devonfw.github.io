{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-accessibility.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-accessibility.asciidoc_accessibility-with-angular-material","title":"Accessibility with Angular Material","breadcrumbs":["Angular","Angular","Accessibility"],"text":"Accessibility with Angular Material\n\nThe a11y package provides a number of tools to improve accessibility. Import\n\n\n\n\n\n\n\nListKeyManager\n\nListKeyManager manages the active option in a list of items based on keyboard interaction. Intended to be used with components that correspond to a role=\"menu\" or role=\"listbox\" pattern . Any component that uses a ListKeyManager will generally do three things:\n\n\n\n\nCreate a @ViewChildren query for the options being managed.\n\n\nInitialize the ListKeyManager, passing in the options.\n\n\nForward keyboard events from the managed component to the ListKeyManager.\n\n\n\n\nEach option should implement the ListKeyManagerOption interface:\n\n\n\n\n\n\n\nTypes of ListKeyManager\n\nThere are two varieties of ListKeyManager, FocusKeyManager and ActiveDescendantKeyManager.\n\n\n\n\nFocusKeyManager\n\nUsed when options will directly receive browser focus. Each item managed must implement the FocusableOption interface:\n\n\n\n\n\n\n\n\nActiveDescendantKeyManager\n\nUsed when options will be marked as active via aria-activedescendant. Each item managed must implement the Highlightable interface:\n\n\n\n\n\n\n\nEach item must also have an ID bound to the listbox’s or menu’s aria-activedescendant.\n\n\n\nFocusTrap\n\nThe cdkTrapFocus directive traps Tab key focus within an element. This is intended to be used to create accessible experience for components like modal dialogs, where focus must be constrained. This directive is declared in A11yModule.\n\n\nThis directive will not prevent focus from moving out of the trapped region due to mouse interaction.\n\n\nFor example:\n\n\n\n\n\n\n\n\nRegions\n\nRegions can be declared explicitly with an initial focus element by using the cdkFocusRegionStart, cdkFocusRegionEnd and cdkFocusInitial DOM attributes. When using the tab key, focus will move through this region and wrap around on either end.\n\n\nFor example:\n\n\n\n\n\n\n\n\nInteractivityChecker\n\nInteractivityChecker is used to check the interactivity of an element, capturing disabled, visible, tabbable, and focusable states for accessibility purposes.\n\n\n\nLiveAnnouncer\n\nLiveAnnouncer is used to announce messages for screen-reader users using an aria-live region.\n\n\nFor example:\n\n\n\n\n\n\n\n\nAPI reference for Angular CDK a11y\n\nAPI reference for Angular CDK a11y\n\n\n\n\n\n\n"}