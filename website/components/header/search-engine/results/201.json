{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-ngrx-getting-started.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-ngrx-getting-started.asciidoc_why-ngrx","title":"Why NgRx?","breadcrumbs":["Angular","NgRx","Introduction to NgRx"],"text":"Why NgRx?\n\nAs stated in the introduction, devon4ng does not stipulate a particular state library, or require using one at all. However, NgRx has proven to be a robust, mature solution for this task, with good tooling and 3rd-party library support. Albeit introducing a level of indirection that requires additional effort even for simple features, the Redux concept enforces a clear separation of concerns leading to a cleaner architecture.\n\n\nNonetheless, you should always compare different approaches to state management and pick the best one suiting your use case. Hereâ€™s a (non-exhaustive) list of competing state management libraries:\n\n\n\n\nPlain RxJS using the simple store described in Abstract Class Store\n\n\nNgXS reduces some boilerplate of NgRx by leveraging the power of decorators and moving side effects to the store\n\n\nMobX follows a more imperative approach in contrast to the functional Redux pattern\n\n\nAkita also uses an imperative approach with direct setters in the store, but keeps the concept of immutable state transitions\n\n\n\n\n\n"}