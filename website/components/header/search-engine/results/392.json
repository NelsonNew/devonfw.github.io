{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-internationalization.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-internationalization.asciidoc_devon4ng-i18n-approach","title":"devon4ng i18n approach","breadcrumbs":["Angular","Angular","Internationalization"],"text":"devon4ng i18n approach\n\nThe official approach could be a bit complicated, therefore the recommended one is to use the recommended library Transloco from https://github.com/ngneat/transloco/.\n\n\nInstall and configure Transloco\n\nIn order to include this library in your devon4ng Angular &gt;= 7.2 project you will need to execute in a terminal:\n\n\n\n\n\n\n\nAs part of the installation process you’ll be presented with questions; Once you answer them, everything you need will automatically be created for you.\n\n\n\n\nFirst, Transloco creates boilerplate files for the requested translations.\n\n\nNext, it will create a new file, transloco-root.module.ts which exposes an Angular’s module with a default configuration, and inject it into the AppModule.\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAs you might have noticed it also set an HttpLoader into the module’s providers. The HttpLoader is a class that implements the TranslocoLoader interface. It’s responsible for instructing Transloco how to load the translation files. It uses Angular HTTP client to fetch the files, based on the given path.\n\n\n\n\n\n\nUsage\n\nIn order to translate any label in any HTML template you will need to use the transloco pipe available:\n\n\n\n\n\n\n\nAn optional parameter from the component TypeScript class could be included as follows:\n\n\n\n\n\n\n\nIt is possible to use with inputs:\n\n\n\n\n\n\n\nIn order to change the language used you will need to create a button or selector that calls the this.translocoService.use(language: string) method from TranslocoService. For example:\n\n\n\n\n\n\n\nThe translations will be included in the en.json, es.json, de.json, etc. files inside the /assets/i18n folder. For example en.json would be (using the previous parameter):\n\n\n\n\n\n\n\nOr with an optional parameter:\n\n\n\n\n\n\n\nTransloco understands nested JSON objects. This means that you can have a translation that looks like this:\n\n\n\n\n\n\n\nIn order to access access the value, use the dot notation, in this case HOME.HELLO.\n\n\n\nUsing the service, pipe or directive\n\nStructural Directive\n\nUsing a structural directive is the recommended approach. It’s DRY and efficient, as it creates one subscription per template:\n\n\n\n\n\n\n\nNote that the t function is memoized. It means that given the same key it will return the result directly from the cache.\n\n\nWe can pass a params object as the second parameter:\n\n\n\n\n\n\n\nWe can instruct the directive to use a different language in our template:\n\n\n\n\n\n\n\n\nPipe\n\nThe use of pipes can be possible too:\n\n\ntemplate:\n\n\n\n\n\n\n\ncomponent:\n\n\n\n\n\n\n\n\nAttribute Directive\n\nThe last option available with transloco is the attribute directive:\n\n\n\n\n\n\n\n\nService\n\nIf you need to access translations in any component or service you can do it injecting the TranslocoService into them:\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\nYou can find a complete example at https://github.com/devonfw/devon4ng-application-template.\n\n\n\n\n\nPlease, visit https://github.com/ngneat/transloco/ for more info.\n\n\n\n\n\n\n\n"}