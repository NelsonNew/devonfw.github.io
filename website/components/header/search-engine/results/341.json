{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-app-initializer.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-app-initializer.asciidoc_what-is-app_initializer","title":" configuration","breadcrumbs":["Angular","Angular","<code>APP_INITIALIZER</code>"],"text":"What is APP_INITIALIZER\n\nAPP_INITIALIZER allows to provide a service in the initialization of the application in a @NgModule. It also allows to use a factory, allowing to create a singleton in the same service. An example can be found in MyThaiStar /core/config/config.module.ts:\n\n\n\n\n\nNote\n\n\n\nThe provider expects the return of a Promise, if it is using Observables, a change with the method toPromise() will allow a switch from Observable to Promise\n\n\n\n\n\n\n\n\n\n\n\nThis is going to allow the creation of a ConfigService where, using a singleton, the service is going to load an external config depending on a route. This dependence with a route, allows to setup different configuration for docker etc. This is seen in the ConfigService of MyThaiStar:\n\n\n\n\n\n\n\nAs it is mentioned earlier, you can see the use of a factory to create a singleton at the start. After that, loadExternalConfig is going to look for a Boolean inside the corresponding environment file inside the path src/environments/, this Boolean loadExternalConfig is going to easily allow to switch to a external config. If it is true, it generates a promise that overwrites the parameters of the local config, allowing to load the external config. Finally, the last method getValues() is going to allow to return the file config with the values (overwritten or not). The local config file from MyThaiStar can be seen here:\n\n\n\n\n\n\n\nFinally, inside a environment file src/environments/environment.ts the use of the Boolean loadExternalConfig is seen:\n\n\n\n\n\n\n\n\nCreating a APP_INITIALIZER configuration\n\nThis section is going to be used to create a new APP_INITIALIZER basic example. For this, a basic app with angular is going to be generated using ng new \"appname\" substituting appname for the name of the app opted.\nIf you are using Nx, the command would be nx generate @nrwl/angular:app \"appname\" in your Nx workspace. Click here to get started with using Nx.\n\n\n\n"}