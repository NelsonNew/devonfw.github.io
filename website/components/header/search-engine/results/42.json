{"type":"doc","filename":"asciidoc_devonfw-guide_my-thai-star.wiki_master-my-thai-star.asciidoc_server-side.html","anchor":"devonfw-guide_my-thai-star.wiki_serverless-design.asciidoc","title":"Serverless design (deprecated)","breadcrumbs":["MyThaiStar","Technical design","Server Side"],"text":"Serverless design (deprecated)\n\nIntroduction\n\nThe NodeJS back-end for My Thai Star application is going to be based on:\n\n\n\n\nServerless as serverless framework\n\n\ndevon4node as data access layer framework\n\n\nDynamoDB as NoSQL Database\n\n\n\n\nTo know more details about the above technologies please visit the following documentation:\n\n\n\n\nServerless\n\n\ndevon4node\n\n\nDynamoDB\n\n\n\n\n\nBasic architecture details\n\nThis structure can be shown in the following example image:\n\n\n\n\n\n\n\n\n\nhandlers - All function handlers following devon4node structure\n\n\nsrc\n\n\n\nmodel - Folder with all data model\n\n\nutils - Folder with all utils like classes and functions\n\n\nconfig.ts - File with server configs\n\n\nlogic.ts - File with the business logic\n\n\n\n\n\ntest - Folder with all tests\n\n\n\n\n\nLayers\n\n\n\nService Layer: this layer will expose the REST API to exchange information with the client applications.\n\n\nLogic Layer: the layer in charge of hosting the business logic of the application.\n\n\nData Access Layer: the layer to communicate with the data base.\n\n\n\n\nService layer\n\nThe services layer will be solved using REST services with Serverless\n\n\nTo give service to the defined User Stories we will need to implement the following services:\n\n\n\n\nprovide all available dishes.\n\n\nsave a booking.\n\n\nsave an order.\n\n\nprovide a list of bookings (only for waiters) and allow filtering.\n\n\nprovide a list of orders (only for waiters) and allow filtering.\n\n\nlogin service (see the Security section).\n\n\nprovide the current user data (see the Security section)\n\n\n\n\nIn order to be compatible with the other back-end implementations, we must follow the naming conventions proposed for Devon4j applications. We will define the following end points for the listed services.\n\n\n\n\n(POST) /mythaistar/services/rest/dishmanagement/v1/dish/search.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order.\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/filter (to filter with fields that does not belong to the Order entity).\n\n\n(POST) /mythaistar/login.\n\n\n(GET) /mythaistar/services/rest/security/v1/currentuser/.\n\n\n\n\nYou can find all the details for the services implementation in the Swagger definition included in the My Thai Star project on Github.\n\n\nTo treat these Http services, we must define the handlers following the devon4node convention:\n\n\n\n\n(handlers/Http/POST/dish-search-handler) /mythaistar/services/rest/dishmanagement/v1/dish/search.\n\n\n(handlers/Http/POST/booking-handler) /mythaistar/services/rest/bookingmanagement/v1/booking.\n\n\n(handlers/Http/POST/order-handler) /mythaistar/services/rest/ordermanagement/v1/order.\n\n\n(handlers/Http/POST/booking-search-handler) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(handlers/Http/POST/order-search-handler) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(handlers/Http/POST/order-filter-handler) /mythaistar/services/rest/ordermanagement/v1/order/filter (to filter with fields that does not belong to the Order entity).\n\n\n(handlers/Http/POST/login-handler) /mythaistar/login.\n\n\n(handlers/Http/GET/current-user-handler) /mythaistar/services/rest/security/v1/currentuser/.\n\n\n\n\nThese handlers will define the behavior for each service and use the logical layer.\n\n\nAn example of handler definition:\n\n\n\n\n\n\n\nThe default integration for a handler is lambda. See devon4node documentation for more information about default values and how to change it.\n\n\n\n\n\n\n\n\n\nIf you change the integration to lambda-proxy, you must take care that in this case the data will not be parsed. You must do JSON.parse explicitly\n\n\n\n\n\n\nAfter defining all the handlers, we must execute the fun command, which will generate the files serverless.yml and webpack.config.js.\n\n\n\nLogic layer and Data access layer\n\nSee in NodeJS section\n\n\n\n\nSecurity with Json Web Token\n\nFor the Authentication and Authorization the app will implement the json web token protocol.\n\n\nJWT basics\n\nRefer to JWT basics for more information.\n\n\n\nJWT implementation details\n\nThe Json Web Token pattern will be implemented based on the JSON web token library available on npm.\n\n\nAuthentication\n\nBased on the JSON web token approach, we will implement two methods in order to verify and user + generate the token and decode the token + return the user data. Also, as My Thai Star is a mainly public application, we will define here the resources that won’t be secured.\n\n\nList of unsecured resources:\n\n\n\n\n/services/rest/dishmanagement/**: to allow anonymous users to see the dishes info in the menu section.\n\n\n/services/rest/ordermanagement/v1/order: to allow anonymous users to save an order. They will need a booking token but they won’t be authenticated to do this task.\n\n\n/services/rest/bookingmanagement/v1/booking: to allow anonymous users to create a booking. Only a booking token is necessary to accomplish this task.\n\n\n/services/rest/bookingmanagement/v1/booking/cancel/**: to allow canceling a booking from an email. Only the booking token is needed.\n\n\n/services/rest/bookingmanagement/v1/invitedguest/accept/**: to allow guests to accept an invite. Only a guest token is needed.\n\n\n/services/rest/bookingmanagement/v1/invitedguest/decline/**: to allow guests to reject an invite. Only a guest token is needed.\n\n\n\n\nTo configure the login we will create a handler called login and then we will use the method code to verify the user and generate the token.\n\n\n\n\n\n\n\nWe have two default users created in the database:\n\n\n\n\nuser: waiter\n\n\npassword: waiter\n\n\nrole: WAITER\n\n\nuser: user0\n\n\npassword: password\n\n\nrole: CUSTOMER\n\n\n\n\n\nToken set up\n\nSee in NodeJS section\n\n\n\nCurrent User request\n\nTo provide the client with the current user data our application should expose a service to return the user details. In order to do this, we must define a handler called current-user-handler. This handler must decode the Authorization token and return the user data.\n\n\n\n\n\n\n\n\nAuthorization\n\nWe need to secure three services, that only should be accessible for users with role Waiter:\n\n\n\n\n(POST) /mythaistar/services/rest/bookingmanagement/v1/booking/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/search.\n\n\n(POST) /mythaistar/services/rest/ordermanagement/v1/order/filter.\n\n\n\n\nTo ensure this, we must decode the Authorization token and check the result. As the role is included in the token, once validated we will have this information and can guarantee access or return a 403 error.\n\n\n\n\n\n\n\n\n\n\n\n\n"}