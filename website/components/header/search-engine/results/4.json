{"type":"doc","filename":"devon4net.wiki_devonfw-guide_devon4net.wiki_howto.asciidoc_2.html","anchor":"devonfw-guide_devon4net.wiki_howto.asciidoc_devon4net-cobigen-guide","title":"devon4net Cobigen Guide","breadcrumbs":[".net","How To section","How to"],"text":"devon4net Cobigen Guide\n\nOverview\n\nIn this guide we will explain how to generate a new WebApi project from an OpenAPI 3.0.0 specification. This  means that we are going to use a “contract first” strategy. This is going to be possible due to these type of files that contain all the information about entities, operations, etc…\n\n\nIn order to make it work we are using CobiGen, a powerful tool for generating source code. CobiGen allows users to generate all the structure and code of the components, helping to save a lot of time otherwise wasted on repetitive tasks.\n\n\n\nGetting things ready\n\ndevonfw Distribution\n\nThe devonfw distributions can be obtained from here. You can find all releases in maven central.\n\n\nIt is not necessary to install nor configure anything. Just extracting the zip content is enough to have a fully functional devonfw. The only thing you have to do is run create-or-update-workspace.bat and then update-all-workspaces.bat to set up all the needed tools.\n\n\n\ndevon4net Templates\n\nWe are going to use the template of devon4net as a base to generate all the code, so what we have to do now is to download said template using the following steps.\n\n\nFirst of all you have to set up all the environment for .NET, you can do this using the following tutorial. Next we are going to create a new folder where we want to have the WebAPI project, lastly we are going to open the terminal there.\n\n\nType the following:\n\n\n\n\n\n\n\nand then:\n\n\n\n\n\n\n\n\nOpenAPI File\n\nIn order to let CobiGen generate all the files, we first have to make some modifications to our OpenAPI file.\n\n\nIt is obligatory to put the “x-rootpackage” tag to indicate where CobiGen will place the generated files as well as the \"x-component\" tags for each component, keep in mind that due to CobiGen’s limitations each component must have its own entity.\n\n\nYou can read more information about how to configure your OpenAPI file and a working example here.\n\n\n\n\nGenerating files\n\nCobigen allow us to generate the files in two different ways. One of them is using Eclipse which it can be done by using the its graphical interface. The other way to generate the code is using the Cobigen` CLI` tool.\n\n\nGenerating files through Eclipse\n\nIn order to generate the files using Eclipse we need to follow some simple steps.\n\n\nFirst we are going to import our basic devon4net WebAPI Project into Eclipse. to do so open Eclipse with the “eclipse-main.bat” file that can be found in the devon distribution root folder. Once we are inside of Eclipse we go to File &gt; Open projects from file system…​ and, under \"Directory\", search for your project.\n\n\n\n\n\n\n\nNext we copy our OpenAPI file into the root folder of the project.\n\n\n\n\n\n\n\nAnd then we right click on OpenAPI file and then select CobiGen &gt; Generate…​ It will display a window like this:\n\n\n\n\n\n\n\nTo select all .NET features choose CRUD devon4net Server otherwise you can select only those that interest you.\n\n\n\n\n\n\n\nOnes you select all the files that you want to generate, click on the “Finish” button to generate all the source code.\n\n\n\nGenerating files through Cobigen` CLI`\n\nIn order to generate the files using the Cobigen` CLI` it is needed to do the following steps:\n\n\n\n\nGo to devonfw distribution folder\n\n\nRun console.bat, this will open a console.\n\n\nGo to the folder you downloaded the devon4net template and your yml file.\n\n\nRun the command:\n\n\n\n\n\n\n\nA list of increments will be printed so that you can start the generation. It has to be selected CRUD devon4net Server increment.\n\n\n\n\n\n\nConfiguration\n\nDependency Injection configuration\n\nAt this point it is needed to make some modifications in the code in order to configure correctly the server. To do so it is needed to locate the services and the repositories files that were created in Devon4Net.WebAPI.Implementation\n\n\nServices location:\n\n\n\n\n\n\n\nRepositories location:\n\n\n\n\n\n\n\nNow, we are going to open the following file Devon4Net.WebAPI.Implementation\\Configure\\DevonConfiguration.cs.\nIn there we have to add the Dependency Injection for the services and the repositories that Cobigen has generated. The following image is an example of what is needed to add.\n\n\n\n\n\n\n\nMoreover it is needed to remove the last line in order to be able to run the application:\n\n\n\n\n\n\n\n\nConfigure data base\n\nCobigen is generating an empty context that has to be filled with manually in order to be able to work with the database. The context can be found in [Project_Name]/Devon4Net.WebAPI.Implementation/Domain/Database/CobigenContext.cs.\n\n\n\n\n\n\n\n\nConfigure services\n\nIn order to finish the configuration of the services it is needed to go to each service file of the managements generated.\n\n\nIn there we will see some \"NotImplementedExceptions\", so it is needed to read carefully each comment inside of each exception in order to be able to use the service. It can be shown an example of the service with its NotImplementedExceptions comments:\n\n\n\n\n\n\n\n\nRun the application\n\nAfter doing all the steps defined above, open a terminal in path: [Project_Name]/Devon4Net.Application.WebAPI and then type:\n\n\n\n\n\n\n\nThis will deploy our application in our localhost with the port 8081, so when you click here (https://localhost:8082/swagger) you can see, in swagger, all the services and the data model.\n\n\n\n\n\n"}