{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-component-decomposition.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-component-decomposition.asciidoc_defining-components","title":"Defining Components","breadcrumbs":["Angular","Angular","Component Decomposition"],"text":"Defining Components\n\nThe following gives an example for component decomposition.\nShown is a screenshot from a style guide to be implemented.\nIt is a widget called Listpicker.\n\n\nThe basic function is an input field accepting direct input.\nSo typing otto puts otto inside the FormControl.\nWith arrow down key or by clicking the icon displayed in the inputs right edge a dropdown is opened.\nInside possible values can be selected and filtered beforehand.\nAfter pressing arrow down key the focus should move into the filter input field.\nUp and down arrow keys can be used to select an element from the list.\nTyping into the filter input field filters the list from which the elements can be selected.\nThe current selected element is highlighted with green background color.\n\n\n\n\n\nFigure 42. Component decomposition example before\n\n\nWhat should be done, is to define small reusable Dumb Components.\nThis way the complexity becomes manageable.\nIn the example every colored box describes a component with the purple box being a Smart Component.\n\n\n\n\n\nFigure 43. Component decomposition example after\n\n\nThis leads to the following component tree.\n\n\n\n\n\nFigure 44. Component decomposition example component tree\n\n\nNote the uppermost component is a Dumb Component.\nIt is a wrapper for the label and the component to be displayed inside a form.\nThe Smart Component is Listpicker.\nThis way the widget can be reused without a form needed.\n\n\nA widgets is a typical Smart Component to be shared across feature modules.\nSo the SharedModule is the place for it to be defined.\n\n\n\n"}