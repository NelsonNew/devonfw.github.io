{"type":"doc","filename":"devonfw-guide_my-thai-star.wiki_deployment.asciidoc.html","anchor":"devonfw-guide_my-thai-star.wiki_future-deployment.asciidoc","title":"Future Deployment","breadcrumbs":["MyThaiStar","CI/CD","Deployment"],"text":"Future Deployment\n\nThe My Thai Star project is going to be built in many technologies. Thus, let’s think about one deployment schema that allow the Angular client to communicate to all three back ends: Java, Node and .NET.\n\n\nAs long as Docker containers are being used, it shouldn’t be that hard to deal with this \"distributed\" deployment. The schema represents 6 Docker containers that will have client-side(s) and server-side(s). Each of 3 Angular client containers (those in red) are going to communicate with different back-ends. So, when the deployment is finished, it would be possible to use all three server-sides just by changing the \"port\" in the URL.\n\n\nLet’s see how it would look like:\n\n\n\n\n\n\n\n\nReverse proxy strategy using Traefik\n\nThis implementation is the same as described at My Thai Star deployment wiki page. The only thing that changes is that Traefik is used instead of NGINX.\n\n\nUsing Traefik as reverse proxy, we can define the routes using labels in the docker containers instead of using a nginx.conf file. With this, it is not necessary to modify the reverse proxy container for each application. In addition, as Traefik is listening to the docker daemon, it can detect new containers and create routes for them without rebooting.\n\n\nExample of labels:\n\n\n\n\n\n\n\nHow to use it\n\nIf you want to build the images from code, change to My Thai Star root folder and execute:\n\n\n\n\n\n\n\nIf you want to build the images from artifacts, change to Traefik folder (reverse-proxy/traefik) and execute:\n\n\n\n\n\n\n\nAfter a seconds, when the healthcheck detects that containers are running, your application will be available at http://localhost:8090. Also, the Traefik dashboard is available at http://localhost:8080.\n\n\nIf you want to check the behavior of the application when you scale up the back-end, you can execute:\n\n\n\n\n\n\n\nWith this, the access to the java back-end will be using the load balancing method: Weighted Round Robin.\n\n\n\n\n\n\n\n"}