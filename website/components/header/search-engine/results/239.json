{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_home.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_home.asciidoc_contents","title":"Contents","breadcrumbs":["Angular","Introduction","devon4ng"],"text":"Contents\n\n\n\nArchitecture Overview\n\n\n\n\nThis section introduces in an easy way the main principles and guidelines based on Angular Style Guide.\n\n\n\n\nClient Meta Architecture\n\n\n\n\nThe goal of this topic is to support the non-functional requirements for the client, i.e. mostly maintainability, scalability, efficiency and portability. As such it provides a component-oriented architecture following the same principles listed already in the devonfw architecture overview.\n\n\nLayers\n\nThis section provides a condensed explanation about the different layers a good Angular application must provide.\n\n\n\n\nComponents Layer\n\n\nServices Layer\n\n\n\n\n\nGuides\n\nThis section introduces concepts to help developers with the tooling and package managers.\n\n\n\n\nPackage Managers\n\n\nPackage Managers Workflow\n\n\nYarn 2 Support\n\n\n\n\n\nAngular\n\nThis is the main section of the documentation, where the developer will find guidelines for accessibility, how to use the Angular toolchain, how to refactor components, create libraries and, in general, maintain Angular applications. But last and not least, developers will also find solutions to common problems many of the Angular projects may have.\n\n\n\n\n\nNote\n\n\nAll the different topics are demonstrated in the samples folder with a small application.\n\n\n\n\n\n\n\nAccessibility\n\n\nAngular Elements\n\n\nAngular Lazy Loading\n\n\nAngular Library\n\n\nAngular Material Theming\n\n\nAngular Progressive Web Apps\n\n\nApp Initializer\n\n\nComponent Decomposition\n\n\nConsuming REST services\n\n\nError Handler\n\n\nFile Structure\n\n\nInternationalization\n\n\nRouting\n\n\nTesting\n\n\nUpdate Angular CLI\n\n\nUpgrade devon4ng applications\n\n\nWorking with Angular CLI\n\n\n\n\n\nIonic\n\nAs part of the devon4ng stack, we include a small section to explain how to develop hybrid mobile Ionic/Angular applications and create PWAs with this UI library. As the previous section, the contents are demonstrated in the samples folder.\n\n\n\n\nIonic Getting started\n\n\nIonic to Android\n\n\nIonic Progressive Web Apps\n\n\n\n\n\nLayouts\n\nAny SPA application must have a layout. So, the purpose of this section is to explain the Angular Material approach.\n\n\n\n\nAngular Material Layout\n\n\n\n\n\nNgRx\n\nState Management is a big topic in big front-end application. This section explains the fundamentals of the industry standard library NgRx, showing its main components.\n\n\n\n\nIntroduction\n\n\nState, Selection and Reducers\n\n\nSide effects with NgRx/Effects\n\n\nSimplifying CRUD with NgRx/Entity\n\n\n\n\n\nCookbook\n\nThe Cookbook section aims to provide solutions to cross-topic challenges that at this moment do not fit in the previous sections. As the Angular section, some of the topics are demonstrated with a sample located in the samples folder.\n\n\n\n\nAbstract Class Store\n\n\nAngular Electron\n\n\nMock Service\n\n\nCypress e2e testing\n\n\nAngular ESLint\n\n\n\n\n\ndevon4ng templates\n\nIn order to support CobiGen generation tool for Angular applications, devon4ng demos realization and provide more opinionated samples, the following templates are also included in devon4ng contents:\n\n\n\n\ndevon4ng-application-template: It is the Angular application template used by the CobiGen code generation tool.\n\n\ndevon4ng-ngrx-template: It is the Angular application template used by the CobiGen code generation tool that makes use of NgRx for state management.\n\n\ndevon4ng-ionic-application-template: It is the Ionic mobile application template used by the CobiGen code generation tool.\n\n\n\n\n\n\n\n"}