{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-component-decomposition.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-component-decomposition.asciidoc_defining-state","title":"Defining state","breadcrumbs":["Angular","Angular","Component Decomposition"],"text":"Defining state\n\nEvery UI has state.\nThere are different kinds of state, for example\n\n\n\n\nView State: e.g. is a panel open, a css transition pending, etc.\n\n\nApplication State: e.g. is a payment pending, current URL, user info, etc.\n\n\nBusiness Data: e.g. products loaded from back-end\n\n\n\n\nIt is good practice to base the component decomposition on the state handled by a component and to define a simplified state model beforehand.\nStarting with the parent - the Smart Component:\n\n\n\n\nWhat overall state does the dialog have: e.g. loading, error, valid data loaded, valid input, invalid input, etc.\nEvery defined value should correspond to an overall appearance of the whole dialog.\n\n\nWhat events can occur to the dialog: e.g. submitting a form, changing a filter, pressing buttons, pressing keys, etc.\n\n\n\n\nFor every Dumb Component:\n\n\n\n\nWhat data does a component display: e.g. a header text, user information to be displayed, a loading flag, etc.\nThis will be a slice of the overall state of the parent Smart Component.\nIn general a Dumb Component presents a slice of its parent Smart Components state to the user.\n\n\nWhat events can occur: keyboard events, mouse events, etc.\nThese events are all handled by its parent Smart Component - every event is passed up the tree to be handled by a Smart Component.\n\n\n\n\nThese information should be reflected inside the modeled state.\nThe implementation is a TypeScript type - an interface or a class describing the model.\n\n\nSo there should be a type describing all state relevant for a Smart Component.\nAn instance of that type is send down the component tree at runtime.\nNot every Dumb Component will need the whole state.\nFor instance a single Dumb Component could only need a single string.\n\n\nThe state model for the previous Listpicker example is shown in the following listing.\n\n\nListing 48. Listpicker state model\n\n\n\n\n\nListpicker holds an instance of ListpickerState which is passed down the component tree via @Input() bindings in the Dumb Components.\nEvents emitted by children - Dumb Components - create a new instance of ListpickerState based on the current instance and the event and its data.\nSo a state transition is just setting a new instance of ListpickerState.\nAngular Bindings propagate the value down the tree after exchanging the state.\n\n\nListing 49. Listpicker State transition\n\n\n\n\n\nNote:\nIt is not always necessary to define the model as independent type.\nSo there would be no state property and just properties for every state defined directly in the component class.\nWhen complexity grows and state becomes larger this is usually a good idea.\nIf the state should be shared between Smart Components a store is to be used.\n\n\n\n"}