{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-app-initializer.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-app-initializer.asciidoc_creating-core-configuration-service","title":"Creating core configuration service","breadcrumbs":["Angular","Angular","<code>APP_INITIALIZER</code>"],"text":"Creating core configuration service\n\nIn order to create the whole configuration module three are going to be created:\n\n\n1.- Create in the core app/core/config/ a config.ts\n\n\n\n\n\n\n\nTaking a look to this file, it creates a interface (Config) that is going to be used by the variable that exports (export const config: Config). This variable config is going to be used by the service that is going to be created.\n\n\n2.- Create in the core app/core/config/ a config.service.ts:\n\n\n\n\n\n\n\nAs it was explained in previous steps, at first, there is a factory that uses the method loadExternalConfig(), this factory is going to be used in later steps in the module. After that, the loadExternalConfig() method checks if the Boolean in the environment is false. If it is false it will return the promise resolved with the normal config. Else, it is going to load the external config in the path (/config), and overwrite the values from the external config to the config thatâ€™s going to be used by the app, this is all returned in a promise.\n\n\n3.- Create in the core a module for the config app/core/config/ a config.module.ts:\n\n\n\n\n\n\n\nAs seen earlier, the ConfigService is added to the module. In this addition, the app is initialized(provide) and it uses the factory that was created in the ConfigService loading the config with or without the external values depending on the Boolean in the config.\n\n\nUsing the Config Service\n\nAs a first step, in the file /app/app.module.ts the ConfigModule created earlier in the other step is going to be imported:\n\n\n\n\n\n\n\nAfter that, the ConfigService is going to be injected into the app.component.ts\n\n\n\n\n\n\n\nFinally, for this demonstration app, the component app/app.component.html is going to show the version of the config it is using at that moment.\n\n\n\n\n\n\n\n\nFinal steps\n\nThe script start that was created earlier in the package.json (npm start) is going to be used to start the application. After that, modifying the Boolean loadExternalConfig inside the corresponding environment file inside /app/environments/ should show the different config versions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}