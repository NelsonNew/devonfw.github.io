{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-ngrx-getting-started.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-ngrx-getting-started.asciidoc_the-need-for-client-side-state-management","title":"The need for client side state management","breadcrumbs":["Angular","NgRx","Introduction to NgRx"],"text":"The need for client side state management\n\nYou may wonder why you should bother with state management. Usually data resides in a back-end storage system, e.g. a database, and is retrieved by the client on a per-need basis. To add, update, or delete entities from this store, clients have to invoke API endpoints at the back-end. Mimicking database-like transactions on the client side may seem redundant. However, there are many use cases for which a global client-side state is appropriate:\n\n\n\n\nthe client has some kind of global state which should survive the destruction of a component, but does not warrant server side persistence, for example: volume level of media, expansion status of menus\n\n\nsever side data should not be retrieved every time it is needed, either because multiple components consume it, or because it should be cached, e.g. the personal watchlist in an online streaming app\n\n\nthe app provides a rich experience with offline functionality, e.g. a native app built with Ionic\n\n\n\n\nSaving global states inside the services they originates from results in a data flow that is hard to follow and state becoming inconsistent due to unordered state mutations. Following the single source of truth principle, there should be a central location holding all your applicationâ€™s state, just like a server side database does. State management libraries for Angular provide tools for storing, retrieving, and updating client-side state.\n\n\n\n"}