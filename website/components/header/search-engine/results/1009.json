{"type":"doc","filename":"devonfw-guide_my-thai-star.wiki_deployment.asciidoc.html","anchor":"devonfw-guide_my-thai-star.wiki_deployment-strategies.asciidoc","title":"Deployment Strategies","breadcrumbs":["MyThaiStar","CI/CD","Deployment"],"text":"Deployment Strategies\n\nIn this chapter different way of deploying My Thai Star are explained. Everything will be based in Docker.\n\n\nIndependent Docker containers\n\nThe first way of deployment will use isolated Docker containers. That means that if the client-side container is deployed, it does not affect the server-side container’s life cycle and vice versa.\n\n\nLet’s show how the containers will behave during their life cycle.\n\n\n\n\n0) Copy everything you need into the Deployment Server directory\n\n\n1) Remove existing container (Nginx or Tomcat)\n\n\n\n\n\n\n\n2) Run new one from the Docker images collection of the external Deployment Server.\n\n\n\n\n\n\n\n3) Add the artifact /dist to the \"deployable\" folder of the Docker container (/usr/share/nginx/html/)\n\n\n\n\n\n\nNow, let’s see how it’s being executed in the command line (simplified due to documentation purposes). The next block of code represents what is inside of the last stage of the Pipeline.\n\n\n\n\n\n\n\nFor every operation performed in the external Deployment Server, it is necessary to define where those commands are going to be executed. So, for each one of previous docker commands, this should appear before:\n\n\n\n\n\n\n\n\n\n\n\nDocker Compose\n\nThe second way of deployment will be by orchestrating both elements of the application: The Angular client-side and the Java server-side. Both elements will be running in Docker containers as well, but in this case they won’t be independent anymore. Docker Compose will be in charge of keeping both containers up, or to put them down.\n\n\nProject adjustment\n\nIn order to perform this second way of deployment, some files will be created in the project. The first one is the Dockerfile for the Angular client-side. This file will pull (if necessary) an Nginx Docker image and copy the Angular artifact (/dist folder) inside of the deployment folder of the image. It will be located in the main directory of the Angular client-side project.\n\n\n\n\n\n\n\nThe second file is the Dockerfile for the Java server-side. Its function will be quite similar to the Angular one. It will run a tomcat Docker image and copy the Java artifact (mythaistar.war file) in its deployment folder.\n\n\n\n\n\n\n\nFinally, as long as the docker-compose is being used, a file containing its configuration will be necessary as well. A new folder one the main My That Star’s directory is created, and it’s called /docker. Inside there is just a docker-compose.yml file. It contains all the information needed to orchestrate the deployment process. For example, which port both containers are going to be published on, and so on. This way of deployment will allow the application to be published or not just with one action.\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s have a look at the file itself:\n\n\n\n\n\n\n\nThis Orchestrated Deployment will offer some interesting possibilities for the future of the application.\n\n\n\n\n\n\n"}