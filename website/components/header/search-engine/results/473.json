{"type":"doc","filename":"devonfw-guide_devon4node.wiki_guides-coding-conventions.asciidoc.html","anchor":"devonfw-guide_devon4node.wiki_guides-coding-conventions.asciidoc_detailed-devon4node-coding-conventions","title":"Detailed devon4node Coding Conventions","breadcrumbs":["NodeJS","Guides","Coding Conventions"],"text":"Detailed devon4node Coding Conventions\n\nHere we will detail some of most important devon4node coding conventions. To be sure that you follows all devon4node coding conventions use the tools described before.\n\n\nIndentation\n\nAll devon4node code files must be indented using spaces. The indentation with must be 2 spaces.\n\n\n\nWhite space\n\nIn order to improve the readability of your code, you must introduce whitespaces. Example:\n\n\n\n\n\n\n\nmust be\n\n\n\n\n\n\n\n\nNaming conventions\n\nFile naming\n\nThe file name must follow the pattern: (name in kebab case).(kind of component).(extension)\nThe test file name must follow the pattern: (name in kebab case).(kind of component).spec.(extension)\n\n\nExample:\n\n\n\n\n\n\n\n\nInterface naming\n\nThe interface names must be in pascal case, and must start with I. There is some controversy in starting the interface names with an I, but we decided to do it because is most of cases you will have an interface and a class with the same name, so, to differentiate them, we decided to start the interfaces with I. Other devonfw stacks solves it by adding the suffix Impl in the class implementations.\n\n\nExample:\n\n\n\n\n\n\n\n\nClass naming\n\nThe class names must be in pascal case.\n\n\nExample:\n\n\n\n\n\n\n\n\nVariable naming\n\nAll variable names must be in camel case.\n\n\n\n\n\n\n\n\n\nDeclarations\n\nFor all variable declarations we must use const or let. var is forbidden. We prefer to use  const when possible.\n\n\n\nProgramming practices\n\nTrailing comma\n\nAll statements must end with a trailing comma. Example:\n\n\n\n\n\n\n\n\nArrow functions\n\nAll anonymous functions must be defined with the arrow function notation. In most of cases itâ€™s not a problem, but sometimes, when you do not want to bind this when you define the function, you can use the other function definition. In this special cases you must disable the linter for those sentence.\n\n\n\nComments\n\nComments must start with a whitespace. Example:\n\n\n\n\n\n\n\n\nQuotemarks\n\nFor string definitions, we must use single quotes.\n\n\n\nif statements\n\nIn all if statements you always must use brackets. Example:\n\n\n\n\n\n\n\n\n\n\n"}