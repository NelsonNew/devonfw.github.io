{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-consuming-rest-services.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-consuming-rest-services.asciidoc_token-management","title":"Token management","breadcrumbs":["Angular","Angular","Consuming REST services"],"text":"Token management\n\nIn most cases the access to back-end API is secured using well known mechanisms as CSRF, JWT or both. In these cases the front-end application must manage the tokens that are generated when the user authenticates. More concretely it must store them to include them in every request automatically. Obviously, when user logs out these tokens must be removed from localStorage, memory, etc.\n\n\nStore security token\n\nIn order to make this guide simple we are going to store the token in memory. Therefore, if we consider that we already have a login mechanism implemented we would like to store the token using a auth.service.ts:\n\n\n\n\n\n\n\nUsing the previous service we will be able to store the token obtained in the login request using the method setToken(token). Please consider that, if you want a more sophisticated approach using localStorage API, you will need to modify this service accordingly.\n\n\n\nInclude token in every request\n\nNow that the token is available in the application it is necessary to include it in every request to a protected API endpoint. Instead of modifying all the HTTP requests in our application, Angular provides a class to intercept every request (and every response if we need to) called HttpInterceptor. Let’s create a service called http-interceptor.service.ts to implement the intercept method of this class:\n\n\n\n\n\n\n\nAs you may notice, this service is making use of an environment field environment.security to determine if we are using JWT or CSRF in order to inject the token accordingly. In your application you can combine both if necessary.\n\n\nConfigure environment.ts file to use the CSRF/JWT.\n\n\n\n\n\n\n\nThe authHeader used is obtained using the injected service AuthService already presented above.\n\n\nIn order to activate the interceptor we need to provide it in our app.module.ts or core.module.ts depending on the application structure. Let’s assume that we are using the latter and the interceptor file is inside a security folder:\n\n\n\n\n\n\n\nAngular automatically will now modify every request and include in the header the token if it is convenient.\n\n\n\n\n\n\n"}