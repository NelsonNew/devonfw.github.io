{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_components-layer.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_components-layer.asciidoc_smart-and-dumb-components","title":"Smart and Dumb Components","breadcrumbs":["Angular","Layers","Components Layer"],"text":"Smart and Dumb Components\n\nThe architecture applies the concept of Smart and Dumb Components (syn. Containers and Presenters).\nThe concept means that components are divided into Smart and Dumb Components.\n\n\nA Smart Component typically is a top-level dialog inside the component tree.\n\n\n\n\na component, that can be routed to\n\n\na modal dialog\n\n\na component, which is placed inside AppComponent\n\n\n\n\nA Dumb Component can be used by one to many Smart Components.\nInside the component tree a Dumb Component is a child of a Smart Component.\n\n\n\n\n\nFigure 10. Component tree example\n\n\nAs shown the topmost component is always the AppComponent in Angular applications.\nThe component tree describes the hierarchy of components starting from AppComponent.\nThe figure shows Smart Components in blue and Dumb Components in green.\nAppComponent is a Smart Component by definition.\nInside the template of AppComponent placed components are static components inside the component tree.\nSo they are always displayed.\nIn the example OverviewComponent and DetailsComponent are rendered by Angular compiler depending on current URL the application displays.\nSo OverviewComponents sub-tree is displayed if the URL is /overview and DetailsComponents sub-tree is displayed if the URL is /details.\nTo clarify this distinction further the following table shows the main differences.\n\n\nTable 45. Smart vs Dumb Components\n\n\n\n\n\n\nSmart Components\nDumb Components\n\n\n\n\ncontain the current view state\nshow data via binding (@Input) and contain no view state\n\n\nhandle events emitted by Dumb Components\npass events up the component tree to be handled by Smart Components (@Output)\n\n\ncall the services layer\nnever call the services layer\n\n\nuse services\ndo not use services\n\n\nconsists of n Dumb Components\nis independent of Smart Components\n\n\n\n\n\n"}