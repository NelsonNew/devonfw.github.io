{"type":"doc","filename":"devon4net.wiki_devonfw-guide_devon4net.wiki_packages.asciidoc.html","anchor":"devonfw-guide_devon4net.wiki_packages.asciidoc_the-packages","title":"The packages","breadcrumbs":[".net","Packages","Packages"],"text":"The packages\n\nYou can get the devon4Net packages on nuget.org.\n\n\nDevon4Net.Application.WebAPI.Configuration\n\nDescription\n\nThe devon4Net web API configuration core.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\n\nDefault configuration values\n\n\n\n\n\n\n\n\nDevon4Net.Infrastructure.CircuitBreaker\n\nDescription\n\nThe Devon4Net.Infrastructure.CircuitBreaker component implements the retry pattern for HTTP/HTTPS calls.\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\n\nDefault configuration values\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\nDescription\n\n\n\n\nCheckCertificate\nTrue if HTTPS is required. This is useful when developing an API Gateway needs a secured HTTP, disabling this on development we can use communications with a valid server certificate\n\n\nEndpoints\nArray with predefined sites to connect with\n\n\nName\nThe name key to identify the destination URL\n\n\nHeaders\nNot ready yet\n\n\nWaitAndRetrySeconds\nArray which determines the number of retries and the lapse period between each retry. The value is in milliseconds.\n\n\nCertificate\nCeritificate client to use to perform the HTTP call\n\n\nSslProtocol\nThe secure protocol to use on the call\n\n\n\n\n\nProtocols\n\n\n\n\n\n\n\n\nProtocol\nKey\nDescription\n\n\n\n\nSSl3\n48\nSpecifies the Secure Socket Layer (SSL) 3.0 security protocol. SSL 3.0 has been superseded by the Transport Layer Security (TLS) protocol and is provided for backward compatibility only.\n\n\nTLS\n192\nSpecifies the Transport Layer Security (TLS) 1.0 security protocol. The TLS 1.0 protocol is defined in IETF RFC 2246.\n\n\nTLS11\n768\nSpecifies the Transport Layer Security (TLS) 1.1 security protocol. The TLS 1.1 protocol is defined in IETF RFC 4346. On Windows systems, this value is supported starting with Windows 7.\n\n\nTLS12\n3072\nSpecifies the Transport Layer Security (TLS) 1.2 security protocol. The TLS 1.2 protocol is defined in IETF RFC 5246. On Windows systems, this value is supported starting with Windows 7.\n\n\nTLS13\n12288\nSpecifies the TLS 1.3 security protocol. The TLS protocol is defined in IETF RFC 8446.\n\n\n\n\n\nUsage\n\nAdd via Dependency Injection the circuit breaker instance. PE:\n\n\n\n\n\n\n\nAt this point you can use the circuit breaker functionality in your code.\n\n\nTo perform a POST call you should use your circuit breaker instance as follows:\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nProperty\nDescription\n\n\n\n\nYourOutputClass\nThe type of the class that you are expecting to retrieve from the POST call\n\n\nNameOftheService\nThe key name of the endpoint provided in the appsettings.json file at Endpoints[] node\n\n\nEndPoint\nPart of the url to use with the base address. PE: /validate\n\n\nInputData\nYour instance of the class with values that you want to use in the POST call\n\n\nMediaType.ApplicationJson\nThe media type flag for the POST call\n\n\n\n\n\n\ndevon4Net.Domain.UnitOfWork\n\nDescription\n\nUnit of work implementation for devon4net solution. This unit of work provides the different methods to access the data layer with an atomic context. Sync and Async repository operations are provided. Customized Eager Loading method also provided for custom entity properties.\n\n\n\n\n\n\n\n\nThis component will move on next releases to Infrastructure instead of being part of Domain components\n\n\n\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nAdding the database connection information:\n\n\n\n\nAdd the database connection on the SetupDatabase method at Startup.cs\n\n\n\n\n\n\n\nWhere:\n\n\n\n\n\n\n\n\nParam\nDescription\n\n\n\n\nTodoContext\nIs the database context definition\n\n\nDefault\nIs the connection string defined at ConnectionString node at the appsettings configuration file\n\n\nWebAPI.Configuration.Enums.DatabaseType.InMemory\nIs the database driver selection. In this case InMemory data base is chosen\n\n\n\n\nThe supported databases are:\n\n\n\n\nSqlServer\n\n\nSqlite\n\n\nInMemory\n\n\nCosmos\n\n\nPostgreSQL\n\n\nMySql\n\n\nMariaDb\n\n\nFireBird\n\n\nOracle\n\n\nMSAccess\n\n\n\n\n\nNotes\n\nNow you can use the unit of work via dependency injection on your classes:\n\n\n\n\n\nFigure 79. Use of Unit of work via dependency injection\n\n\nAs you can see in the image, you can use Unit Of Work class with your defined ModelContext classes.\n\n\nPredicate expression builder\n\n\n\n\nUse this expression builder to generate lambda expressions dynamically.\n\n\n\n\n\n\n\n\n\nWhere T is a class. At this moment, you can build your expression and apply it to obtain your results in a efficient way and not retrieving data each time you apply an expression.\n\n\n\n\nExample from My Thai Star .Net Core implementation:\n\n\n\n\n\n\n\n\n\n\n\ndevon4Net.Infrastructure.Extensions\n\nDescription\n\nMiscellaneous extension library which contains :\n- Predicate expression builder\n- DateTime formatter\n- HttpClient\n- HttpContext (Middleware support)\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\nHttpContext\n\n\n\n\nTryAddHeader method is used on devon4Net.Infrastructure.Middleware component to add automatically response header options such authorization.\n\n\n\n\n\n\ndevon4Net.Infrastructure.JWT\n\nDescription\n\n\n\nJSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the` HMAC` algorithm) or a public/private key pair using RSA or ECDSA.\n\n\n\nâ€” What is JSON Web Token?\nhttps://jwt.io/introduction/\n\n\n\n\n\ndevon4Net component to manage  JWT standard to provide security to .Net API applications.\n\n\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\n\n\n\nDefault configuration values\n\n\n\n\n\n\n\n\nClockSkew indicates the token expiration time in minutes\n\n\nCertificate you can specify the name of your certificate (if it is on the same path) or the full path of the certificate. If the certificate does not exists an exception will be raised.\n\n\nSecretKeyLengthAlgorithm, SecretKeyEncryptionAlgorithm and CertificateEncryptionAlgorithm supported algorithms are:\n\n\n\n\n\n\n\n\n\n\nAlgorithm\nDescription\n\n\n\n\nAes128Encryption\n\"http://www.w3.org/2001/04/xmlenc#aes128-cbc\"\n\n\nAes192Encryption\n\"http://www.w3.org/2001/04/xmlenc#aes192-cbc\"\n\n\nAes256Encryption\n\"http://www.w3.org/2001/04/xmlenc#aes256-cbc\"\n\n\nDesEncryption\n\"http://www.w3.org/2001/04/xmlenc#des-cbc\"\n\n\nAes128KeyWrap\n\"http://www.w3.org/2001/04/xmlenc#kw-aes128\"\n\n\nAes192KeyWrap\n\"http://www.w3.org/2001/04/xmlenc#kw-aes192\"\n\n\nAes256KeyWrap\n\"http://www.w3.org/2001/04/xmlenc#kw-aes256\"\n\n\nRsaV15KeyWrap\n\"http://www.w3.org/2001/04/xmlenc#rsa-1_5\"\n\n\nRipemd160Digest\n\"http://www.w3.org/2001/04/xmlenc#ripemd160\"\n\n\nRsaOaepKeyWrap\n\"http://www.w3.org/2001/04/xmlenc#rsa-oaep\"\n\n\nAes128KW\n\"A128KW\"\n\n\nAes256KW\n\"A256KW\"\n\n\nRsaPKCS1\n\"RSA1_5\"\n\n\nRsaOAEP\n\"RSA-OAEP\"\n\n\nExclusiveC14n\n\"http://www.w3.org/2001/10/xml-exc-c14n#\"\n\n\nExclusiveC14nWithComments\n\"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\"\n\n\nEnvelopedSignature\n\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"\n\n\nSha256Digest\n\"http://www.w3.org/2001/04/xmlenc#sha256\"\n\n\nSha384Digest\n\"http://www.w3.org/2001/04/xmldsig-more#sha384\"\n\n\nSha512Digest\n\"http://www.w3.org/2001/04/xmlenc#sha512\"\n\n\nSha256\n\"SHA256\"\n\n\nSha384\n\"SHA384\"\n\n\nSha512\n\"SHA512\"\n\n\nEcdsaSha256Signature\n\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\"\n\n\nEcdsaSha384Signature\n\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\"\n\n\nEcdsaSha512Signature\n\"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\"\n\n\nHmacSha256Signature\n\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha256\"\n\n\nHmacSha384Signature\n\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha384\"\n\n\nHmacSha512Signature\n\"http://www.w3.org/2001/04/xmldsig-more#hmac-sha512\"\n\n\nRsaSha256Signature\n\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"\n\n\nRsaSha384Signature\n\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\"\n\n\nRsaSha512Signature\n\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\"\n\n\nRsaSsaPssSha256Signature\n\"http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1\"\n\n\nRsaSsaPssSha384Signature\n\"http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1\"\n\n\nRsaSsaPssSha512Signature\n\"http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1\"\n\n\nEcdsaSha256\n\"ES256\"\n\n\nEcdsaSha384\n\"ES384\"\n\n\nEcdsaSha512\n\"ES512\"\n\n\nHmacSha256\n\"HS256\"\n\n\nHmacSha384\n\"HS384\"\n\n\nHmacSha512\n\"HS512\"\n\n\nNone\n\"none\"\n\n\nRsaSha256\n\"RS256\"\n\n\nRsaSha384\n\"RS384\"\n\n\nRsaSha512\n\"RS512\"\n\n\nRsaSsaPssSha256\n\"PS256\"\n\n\nRsaSsaPssSha384\n\"PS384\"\n\n\nRsaSsaPssSha512\n\"PS512\"\n\n\nAes128CbcHmacSha256\n\"A128CBC-HS256\"\n\n\nAes192CbcHmacSha384\n\"A192CBC-HS384\"\n\n\nAes256CbcHmacSha512\n\"A256CBC-HS512\"\n\n\n\n\n\n\n\n\n\n\nPlease check Microsoft documentation to get the lastest updates on supported encryption algorithms\n\n\n\n\n\n\n\nAdd this line of code  (only if you use this component stand alone):\n\n\n\n\n\n\n\n\n\nOn\n\n\n\n\n\n\n\nor on:\n\n\n\n\n\n\n\n\n\nInside the AddBusinessCommonJwtPolicy method you can add your  JWT Policy like in My Thai Star application sample:\n\n\n\n\n\n\n\n\n\n\nNotes\n\n\n\nThe certificate will be used to generate the key to encrypt the json web token.\n\n\n\n\n\n\ndevon4Net.Infrastructure.Middleware\n\nDescription\n\n\n\ndevon4Net support for middleware classes.\n\n\nIn ASP.NET Core, middleware classes can handle an HTTP request or response. Middleware can either:\n\n\n\nHandle an incoming HTTP request by generating an HTTP response.\n\n\nProcess an incoming HTTP request, modify it, and pass it on to another piece of middleware.\n\n\nProcess an outgoing HTTP response, modify it, and pass it on to either another piece of middleware, or the ASP.NET Core web server.\n\n\n\n\n\ndevon4Net supports the following automatic response headers:\n\n\n\nAccessControlExposeHeader\n\n\nStrictTransportSecurityHeader\n\n\nXFrameOptionsHeader\n\n\nXssProtectionHeader\n\n\nXContentTypeOptionsHeader\n\n\nContentSecurityPolicyHeader\n\n\nPermittedCrossDomainPoliciesHeader\n\n\nReferrerPolicyHeader:toc: macro\n\n\n\n\n\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nYou can configure your Middleware configuration on appsettings.{environment}.json:\n\n\n\n\n\n\n\n\n\n\n\nOn the above sample, the server application will add to response header the AccessControlExposeHeader, XFrameOptionsHeader, XssProtectionHeader and XContentTypeOptionsHeader headers.\n\n\nIf the header response type does not have a value, it will not be added to the response headers.\n\n\n\n\n\n\ndevon4Net.Infrastructure.Swagger\n\nDescription\n\n\n\ndevon4net Swagger abstraction to provide full externalized easy configuration.\n\n\nSwagger offers the easiest to use tools to take full advantage of all the capabilities of the OpenAPI Specification (OAS).\n\n\n\n\n\nConfiguration\n\n\n\nInstall package on your solution:\n\n\n\n\n\n\n\nYou can configure your Swagger configuration on appsettings.{environment}.json:\n\n\n\n\n\n\n\n\n\n\n\nAdd this line of code (only if you use this component stand alone):\n\n\n\n\n\n\n\n\n\nOn\n\n\n\n\n\n\n\n\n\nAlso add this line of code  (only if you use this component stand alone):\n\n\n\n\n\n\n\n\n\nOn\n\n\n\n\n\n\n\n\n\nEnsure your API actions and non-route parameters are decorated with explicit \"Http\" and \"From\" bindings.\n\n\n\n\n\nNotes\n\n\n\nTo access to swagger UI launch your API project and type in your html browser the url http://localhost:yourPort/swagger.\n\n\nIn order to generate the documentation annotate your actions with summary, remarks and response tags:\n\n\n\n\n\n\n\n\n\n\n\nEnsure that your project has the generateXMLdocumentationfile check active on build menu:\n\n\n\n\n\n\n\nFigure 80. Swagger documentation\n\n\n\n\nEnsure that your XML files has the attribute copy always to true:\n\n\n\n\n\n\n\nFigure 81. Swagger documentation\n\n\n\n\ndevon4Net.Infrastructure.Test\n\nDescription\n\ndevon4Net Base classes to create unit tests and integration tests with Moq and xUnit.\n\n\n\nConfiguration\n\n\n\nLoad the template:\n&gt; dotnet new -i devon4Net.Test.Template\n&gt; dotnet new devon4NetTest\n\n\n\n\n\nNotes\n\n\n\nAt this point you can find this classes:\n\n\n\nBaseManagementTest\n\n\nDatabaseManagementTest&lt;T&gt; (Where T is a devon4NetBaseContext class)\n\n\n\n\n\nFor unit testing, inherit a class from BaseManagementTest.\n\n\nFor integration tests, inherit a class from DatabaseManagementTest.\n\n\nThe recommended databases in integration test are in memory database or SQlite database.\n\n\nPlease check My thai Star test project.\n\n\n\n\n\n\n\n"}