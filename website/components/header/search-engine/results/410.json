{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-ngrx-effects.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-ngrx-effects.asciidoc_obtaining-the-recommendation-list-from-the-server","title":"Obtaining the recommendation list from the server","breadcrumbs":["Angular","NgRx","Side effects with NgRx/Effects"],"text":"Obtaining the recommendation list from the server\n\nCreate a module for recommendations and add stores and states as in the previous chapter. Add EffectsModule.forRoot([]) to the imports in AppModule below StoreModule.forRoot(). Add effects to the feature module:\n\n\n\n\n\n\n\nWe need actions for loading the movie list, success and failure cases:\n\n\nrecommendation/actions/index.ts\n\n\n\n\n\n\n\nIn the reducer, we use a loading flag so the UI can show a loading spinner. The store is updated with arriving data.\n\n\nrecommendation/actions/index.ts\n\n\n\n\n\n\n\nWe need an API service to talk to the server. For demonstration purposes, we simulate an answer delayed by one second:\n\n\nrecommendation/services/recommendation-api.service.ts\n\n\n\n\n\n\n\nHere are the effects:\n\n\nrecommendation/services/recommendation-api.service.ts\n\n\n\n\n\n\n\nEffects are always observables and return actions. In this example, we consume the actions observable provided by NgRx and listen only for the loadRecommendedMovies actions by using the ofType operator. Using switchMap, we map to a new observable, one that loads movies and maps the successful result to a new loadRecommendedMoviesSuccess action or a failure to loadRecommendedMoviesFailure. In a real application we would show a notification in the error case.\n\n\n\n\n\nNote\n\n\n\nIf an effect should not dispatch another action, return an empty observable.\n\n\n\n\n\n\nContinue reading how to simplify CRUD (Create Read Update Delete) operations using @ngrx/entity.\n\n\n\n\n\n"}