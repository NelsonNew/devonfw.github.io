{"type":"doc","filename":"devonfw-guide_cobigen.wiki_master-cobigen.asciidoc_how-to.html","anchor":"devonfw-guide_cobigen.wiki_howto_angular-client-generation.asciidoc","title":"Angular 8 Client Generation","breadcrumbs":["Tools","CobiGen — Code-based incremental Generator","How to"],"text":"Angular 8 Client Generation\n\nThe generation can create a full Angular 8 client using the devon4ng-application-template package located at workspaces/examples folder of the distribution. For more details about this package, please refer here.\n\n\nTake into account that the TypeScript merging for CobiGen needs Node 6 or higher to be installed at your machine.\n\n\n\n\n\n\n\n\nThis is a short introduction to the Angular generation. For a deeper tutorial including the generation of the backend, we strongly recommend you to follow this document.\n\n\n\n\n\nRequisites\n\nInstall yarn globally:\n\n\n\n\n\n\n\n\nAngular 8 workspace\n\nThe output location of the generation can be defined editing the cobigen.properties file located at crud_angular_client_app/templates folder of the CobiGen_Templates project.\n\n\n\n\n\n\n\nBy default, the output path would be into the devon4ng-application-template folder at the root of the devon4j project parent folder:\n\n\n\n\n\n\n\nHowever, this path can be changed, for example to src/main/client folder of the devon4j project:\n\n\n\n\n\n\n\n\n\n\n\n\nOnce the output path is chosen, copy the files of DEVON4NG-APPLICATION-TEMPLATE repository into this output path.\n\n\n\nInstall Node dependencies\n\nOpen a terminal into devon4ng-application-template copied and just run the command:\n\n\n\n\n\n\n\nThis will start the installation of all node packages needed by the project into the node_modules folder.\n\n\n\nGenerating\n\nFrom an Eto object, right click, CobiGen → Generate will show the CobiGen wizard relative to client generation:\n\n\n\n\n\n\n\nCheck all the increments relative to Angular:\n\n\n\n\n\n\n\n\n\nThe Angular devon4j URL increment is only needed for the first generations however, checking it again on next generation will not cause any problem.\n\n\n\n\n\n\nAs we done on other generations, we click Next to choose which fields to include at the generation or simply clicking Finish will start the generation.\n\n\n\n\n\n\n\n\nRouting\n\nDue to the nature of the TypeScript merger, currently is not possible to merge properly the array of paths objects of the routings at app.routing.ts file so, this modification should be done by hand on this file. However, the import related to the new component generated is added.\n\n\nThis would be the generated app-routing.module file:\n\n\n\n\n\n\n\nAdding the following into the children object of home, will add into the side menu the entry for the component generated:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJWT Authentication\n\nIf you are using a back end server with JWT Authentication (there is a sample in workspaces/folder called sampleJwt) you have to specify the Angular application to use this kind of authentication.\n\n\nBy default the variable is set to CSRF but you can change it to JWT by going to the Enviroment.ts and setting security: 'jwt'.\n\n\n\nRunning\n\nFirst of all, run your devon4j java server by right clicking over SpringBootApp.java Run As → Java Application. This will start to run the SpringBoot server. Once you see the Started SpringBoot in XX seconds, the backend is running.\n\n\n\n\n\n\n\nOnce the the server is running, open a Devon console at the output directory defined previously and run:\n\n\n\n\n\n\n\nThis will run the Angular 8 application at:\n\n\n\n\n\n\n\n\n\n\n\n\nOnce finished, the browser will open automatically at the previous localhost URL showing the Angular 8 application, using the credentials set at the devon4j java server you will be able to access.\n\n\n\n\n\n"}