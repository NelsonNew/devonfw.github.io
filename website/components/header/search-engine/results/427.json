{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-routing.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-routing.asciidoc_triggering-route-changes","title":"Triggering Route Changes","breadcrumbs":["Angular","Angular","Routing"],"text":"Triggering Route Changes\n\nWith Angular you have two ways of triggering route changes.\n\n\n\n\nDeclarative with bindings in component HTML templates\n\n\nProgrammatic with Angular Router service inside component classes\n\n\n\n\nOn the one hand, architecture-wise it is a much cleaner solution to trigger route changes in Smart Components.\nThis way you have every UI event that should trigger a navigation handled in one place - in a Smart Component.\nIt becomes very easy to look inside the code for every navigation, that can occur.\nRefactoring is also much easier, as there are no navigation events \"hidden\" in the HTML templates\n\n\nOn the other hand, in terms of accessibility and SEO it is a better solution to rely on bindings in the view - e.g. by using Angular router-link directive.\nThis way screen readers and the Google crawler can move through the page easily.\n\n\n\n\n\nTip\n\n\nIf you do not have to support accessibility (screen readers, etc.) and to care about SEO (Google rank, etc.),\nthen you should aim for triggering navigation only in Smart Components.\n\n\n\n\n\n\n\n\nFigure 47. Triggering navigation\n\n\n\n"}