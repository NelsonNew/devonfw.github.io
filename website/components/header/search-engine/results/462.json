{"type":"doc","filename":"devonfw-guide_devon4node.wiki_devon4node-architecture.asciidoc_devon4node-application-structure.html","anchor":"devonfw-guide_devon4node.wiki_devon4node-architecture.asciidoc_nestjs-components","title":"NestJS components","breadcrumbs":["NodeJS","devon4node Architecture","devon4node application structure"],"text":"NestJS components\n\nNestJS provides several components that you can use in your application:\n\n\n\n\nControllers\n\n\nProviders\n\n\nMiddleware\n\n\nGuards\n\n\nInterceptors\n\n\nPipes\n\n\nException filters\n\n\n\n\nIn the NestJS documentation you can find all information about each component. But, something that is missing in the documentation is the execution order. Every component can be defined in different levels: globally, in the controller or in the handler. As middleware is part of the HTTP server we can define it in a different way: globally or in the module.\n\n\n\n\n\n\n\nIt is not necessary to have defined components in every level. For example, you can have defined a interceptor globally but you do not have any other in the controller or handler level. If nothing is defined in some level, the request will continue to the next component.\n\n\nAs you can see in the previous image, the first component which receive the request is the global defined middleware. Then, it send the request to the module middleware. Each of them can return a response to the client, without passing the request to the next level.\n\n\nThen, the request continue to the guards: first the global guard, next to controller guard and finally to the handler guard. At this point, we can throw an exception in all components and the exception filter will catch it and send a proper error message to the client. We do not paint the filters in the graphic in order to simplify it.\n\n\nAfter the guards, is time to interceptors: global interceptors, controller interceptors and handler interceptors. And last, before arrive to the handler inside the controller, the request pass through the pipes.\n\n\nWhen the handler has the response ready to send to the client, it does not go directly to the client. It come again to the interceptors, so we can also intercept the response. The order this time is the reverse: handler interceptors, controller interceptors and global interceptors. After that, we can finally send the response to the client.\n\n\nNow, with this in mind, you are able to create the components in a better way.\n\n\n\n\n"}