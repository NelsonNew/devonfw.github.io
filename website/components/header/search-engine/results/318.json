{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-angular-elements.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-angular-elements.asciidoc_angular-element-within-another-angular-project","title":"Angular Element within another Angular project","breadcrumbs":["Angular","Angular","Angular Elements"],"text":"Angular Element within another Angular project\n\nIn order to use an Angular Element within another Angular project the following steps need to be followed:\n\n\nCopy bundled script and css to resources\n\nFirst copy the generated .js and .css inside assets in the corresponding folder.\n\n\n\nAdd bundled script to angular.json\n\nInside angular.json both of the files that were copied in the last step are going to be included. This will be done both, in test and in build. Including it on the test, will allow to perform unitary tests.\n\n\n\n\n\n\n\nBy declaring the files in the angular.json angular will take care of including them in a proper way.\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing Angular Element\n\nThere are two ways that Angular Element can be used:\n\n\nCreate component dynamically\n\nIn order to add the component in a dynamic way, first adding a container is necessary:\n\n\napp.component.html\n\n\n\n\n\n\n\nWith this container created, inside the app.component.ts a method is going to be created. This method is going to find the container, create the dynamic element and append it into the container.\n\n\napp.component.ts\n\n\n\n\n\n\n\n\nUsing it directly\n\nIn order to use it directly on the templates, in the app.module.ts the CUSTOM_ELEMENTS_SCHEMA needs to be added:\n\n\n\n\n\n\n\nThis is going to allow the use of the Angular Element in the templates directly:\n\n\napp.component.html\n\n\n\n\n\n\n\nYou can find a working example of Angular Elements in our devon4ts-samples repo by referring the samples named angular-elements and angular-elements-test.\n\n\n\n\n\n\n\n"}