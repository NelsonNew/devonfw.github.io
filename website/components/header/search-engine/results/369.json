{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-eslint.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-eslint.asciidoc_migrating-an-angular-cli-project-from-codelyzer-and-tslint","title":"Migrating an Angular CLI project from Codelyzer and TSLint","breadcrumbs":["Angular","Cookbook","Angular ESLint support"],"text":"Migrating an Angular CLI project from Codelyzer and TSLint\n\n1 - Add relevant dependencies\n\nThe first step is to run the schematic to add @angular-eslint to your project:\n\n\n\n\n\n\n\nThis will handle installing the latest version of all the relevant packages for you and adding them to the devDependencies of your package.json.\n\n\n\n2 - Run the convert-tslint-to-eslint schematic on a project\n\nThe next thing to do is consider which \"project\" you want to migrate to use ESLint. If you have a single application in your workspace you will likely have just a single entry in the projects configuration object within your angular.json file. If you have a projects/` directory in your workspace, you will have multiple entries in your projects configuration and you will need to chose which one you want to migrate using the convert-tslint-to-eslint schematic.\n\n\nYou can run it like so:\n\n\n\n\n\n\n\nFrom now on, ng lint will use ESLint!\n\n\n\n3 - Remove root TSLint configuration and use only ESLint\n\nOnce you are happy with your ESLint setup, you simply need to remove the root-level tslint.json and potentially uninstall TSLint and any TSLint-related plugins/dependencies if your Angular CLI workspace is now no longer using TSLint at all.\n\n\nMore info at https://github.com/angular-eslint/angular-eslint\n\n\n\n\n\n"}