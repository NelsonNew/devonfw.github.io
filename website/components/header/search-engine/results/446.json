{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc_testing-smart-components","title":"Testing Smart Components","breadcrumbs":["Angular","Angular","Testing"],"text":"Testing Smart Components\n\nTesting Smart Components should assure the following.\n\n\n\n\nBindings are correct.\n\n\nSelectors which load data from the store are correct.\n\n\nAsynchronous behavior is correct (loading state, error state, \"normal\" state).\n\n\nOftentimes through testing one realizes, that important edge cases are forgotten.\n\n\nDo these test become very complex, it is often an indicator for poor code quality in the component.\nThen the implementation is to be adjusted / refactored.\n\n\nWhen testing values received from the native DOM, you will test also that 3rd party libraries did not change with a version upgrade.\nA failing test will show you what part of a 3rd party library has changed.\nThis is much better than the users doing this for you.\nFor example a binding might fail because the property name was changed with a newer version of a 3rd party library.\n\n\n\n\nIn the function beforeEach() the TestBed imported from Angular Testing Utilities needs to be initialized.\nThe goal should be to define a minimal test-module with TestBed.\nThe following code gives you an example.\n\n\nListing 81. Example test setup for Smart Components\n\n\n\n\n\nIt is important:\n\n\n\n\nUse RouterTestingModule instead of RouterModule\n\n\nUse TranslateModule.forRoot() without translations\nThis way you can test language-neutral without translation marks.\n\n\nDo not add a whole module from your application - in declarations add the tested Smart Component with all its Dumb Components\n\n\nThe store should never be stubbed.\nIf you need a complex test setup, just use the regular methods defined on the store.\n\n\nStub all services used by the Smart Component.\nThese are mostly UseCase services.\nThey should not be tested by these tests.\nOnly the correct call to their functions should be assured.\nThe logic inside the UseCase services is tested with separate tests.\n\n\ndetectChanges() performance an Angular Change Detection cycle (Angular refreshes all the bindings present in the view)\n\n\ntick() performance a virtual macro task, tick(1000) is equal to the virtual passing of 1s.\n\n\n\n\nThe following test cases show the testing strategy in action.\n\n\nListing 82. Example\n\n\n\n\n\nThe examples show the basic testing method\n\n\n\n\nSet the store to a well-defined state\n\n\ncheck if the component displays the correct values\n\n\n…​ via checking values inside the native DOM.\n\n\n\n\n\n"}