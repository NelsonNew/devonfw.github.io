{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-package-managers.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-package-managers.asciidoc_semantic-versioning","title":"Semantic Versioning","breadcrumbs":["Angular","Guides","Package Managers"],"text":"Semantic Versioning\n\nWhen working with package managers it is very important to understand the concept of semantic versioning.\n\n\nTable 50. Version example 1.2.3\n\n\n\n\n\n\n\n\nVersion\n1.\n2.\n3\n\n\n\n\nVersion name when incrementing\nMajor (2.0.0)\nMinor (1.3.0)\nPatch (1.2.4)\n\n\nHas breaking changes\nyes\nno\nno\n\n\nHas features\nyes\nyes\nno\n\n\nHas bug fixes\nyes\nyes\nyes\n\n\n\n\nThe table gives an overview of the most important parts of semantic versioning.\nIn the header version 1.2.3 is displayed.\nThe first row shows the name and the resulting version when incrementing a part of the version.\nThe next rows show specifics of the resulting version - e.g. a major version can have breaking changes, features and bug fixes.\n\n\nPackages from npm and yarn leverage semantic versioning and instead of selecting a fixed version one can specify a selector.\nThe most common selectors are:\n\n\n\n\n^1.2.3\nAt least 1.2.3 - 1.2.4 or 1.3.0 can be used, 2.0.0 can not be used\n\n\n~1.2.3\nAt lease 1.2.3 - 1.2.4 can be used, 2.0.0 and 1.3.0 can not be used\n\n\n&gt;=1.2.3\nAt least 1.2.3 - every version greater can also be used\n\n\n\n\nThis achieves a lower number of duplicates.\nTo give an example:\n\n\nIf package A needs version 1.3.0 of package C and package B needs version 1.4.0 of package C one would end up with 4 packages.\n\n\nIf package A needs version ^1.3.0 of package C and package B needs version 1.4.0 of package C one would end up with 3 packages.\nA would use the same version of C as B - 1.4.0.\n\n\n\n"}