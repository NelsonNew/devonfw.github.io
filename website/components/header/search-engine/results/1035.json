{"type":"doc","filename":"devonfw-guide_my-thai-star.wiki_production-line-ci.asciidoc.html","anchor":"devonfw-guide_my-thai-star.wiki_angular-ci.asciidoc","title":"Angular CI","breadcrumbs":["MyThaiStar","CI/CD","My Thai Star in Production Line"],"text":"Angular CI\n\nThe Angular client-side of My Thai Star is going to have some specific needs for the CI-CD Pipeline to perform mandatory operations.\n\n\nPipeline\n\nThe Pipeline for the Angular client-side is going to be called MyThaiStar_FRONT-END_BUILD. It is located in the PL instance, under the MTS folder (as previously explained). It is going to follow a process flow like this one:\n\n\n\n\n\n\n\nEach of those steps are called stages in the Jenkins context.Let’s see what those steps mean in the context of the Angular application:\n\n\n\n\nDeclarative: Checkout SCM\n\nRetrieves the project from the GitHub repository which it’s located. This step is not defined directly in our pipeline, but as it is loaded from the repository this step should always be done at the beginning.\n\n\n\n\n\n\n\n\nDeclarative: Tool Install\n\nThe Pipeline needs some Tools to perform some operations with the Angular project. These tool is a correct version of NodeJS (10.17.0 LTS) with Yarn installed as global package.\n\n\n\n\n\n\n\n\nLoading Custom Tools\n\nThe Pipeline also needs a browser in order to execute the tests, so in this step the chrome-stable will be loaded. We will use it in a headless mode.\n\n\n\n\n\n\n\n\nFresh Dependency Installation\n\nThe script $ yarn does a package installation. As we always clean the workspace after the pipeline, all packages must be installed in every execution.\n\n\n\nCode Linting\n\nThis script executes a linting process of TypeScript. Rules can be defined in the tslint.json file of the project. It throws an exception whenever a file contains a non-compliant piece of code.\n\n\n\nExecute Angular tests\n\nThe CI testing of the Angular client is different than the standard local testing (adapted to CI environments, as specified in the Adaptation section of document). This script just executes the following commands:\n\n\n\n\n\n\n\n\nCheck dependencies\n\nBefore continue, we print the result of yarn audit. It shows the vulnerabilities in the dependencies. It do not process the response. The purpose is only to track the result of the command.\n\n\n\n\n\n\n\n\nSonarQube code analysis\n\nThe script load and execute the tool sonar-scanner. This tool is loaded here because it’s not used in any other part of the pipeline. The sonar-scanner will take all code, upload it to SonarQube and wait until SonarQube send us a response with the quality of our code. If the code do not pass the quality gate, the pipeline will stop at this point.\n\n\n\nBuild Application\n\nThe building process of the Angular client would result in a folder called /dist in the main Angular’s directory. That folder is the one that is going to be served afterwards as an artifact. This process has also been adapted to some Deployment needs. This building script executes the following:\n\n\n\n\n\n\n\n\nDeliver application into Nexus\n\nOnce the scripts produce the Angular artifact (/dist folder), it’s time to package it and store into nexus.\n\n\n\nDeclarative: Post Actions\n\nAt the end, this step is always executed, even if a previous stage fail. We use this step to clean up the workspace for future executions\n\n\n\n\n\n\n\n\n\n\n\nAdjustments\n\nThe Angular project Pipeline needed some \"extra\" features to complete all planned processes. Those features resulted in some additions to the project.\n\n\nPipeline Environment\n\nIn order to easily reuse the pipeline in other angular projects, all variables have been defined in the block environment. All variables have the default values that Production Line uses, so if you’re going to work in production line you won’t have to change anything. Example:\n\n\n\n\n\n\n\nDescription\n\n\n\nbuild Script: script for build the application. It must be defined at package.json.\n\nExample (package.json):\n\n\n\n\n\n\n\nThis will be used as follows:\n\n\n\n\n\n\n\n\nlint Script: Script for lint the application. Defined at package.json\n\nExample (package.json):\n\n\n\n\n\n\n\nThis will be used as follows:\n\n\n\n\n\n\n\n\ntest Script: Script for test the application. Defined at package.json\n\nExample (package.json):\n\n\n\n\n\n\n\nThis will be used as follows:\n\n\n\n\n\n\n\n\nangular-Dir: Relative route to angular application. In My Thai Star this is the angular folder. The actual directory (.) is also allowed.\n\n\n\n\n\n\n\nsrcDir: Directory where you store the source code. For angular applications the default value is src\n\n\n\n\n\n\n\nchrome: Since you need a browser to run your tests, we must provide one. This variable contains the name of the custom tool for google chrome.\n\n\n\n\n\n\n\nsonar-Tool: Name of the SonarQube scanner installation.\n\n\n\n\n\n\n\nsonar-Env: Name of the SonarQube environment. SonarQube is the default value for PL.\n\n\n\n\n\n\n\ngroup-Id: Group id of the application. It will be used to storage the application in nexus3\n\n\n\n\n\n\n\nrepository-Id: Id of the nexus3 repository. It must be defined at maven global config file.\n\n\n\n\n\n\n\nrepository URL: The URL of the repository.\n\n\nglobal Settings Id: The id of the global settings file.\n\n\n\n\n\n\n\nmaven Installation: The name of the maven tool.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}