{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-layout-with-angular-material.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-layout-with-angular-material.asciidoc_development","title":"Development","breadcrumbs":["Angular","Layouts","Angular Material Layout"],"text":"Development\n\nNow that we have all the Angular Material related dependencies set up in our project, we can start coding. Let’s begin by adding a suitable margin and font to the body element of our single page application. We will add it in the src/styles.scss file to apply it globally:\n\n\nListing 78. In src/styles.scss:\n\n\n\n\n\nAt this point, if we run our application, this is how it will look like:\n\n\n\n\n\nFigure 58. Application with Angular Material set up\n\n\nWe will clear the app.component.html file and setup a header with a menu button and some navigational links. We will use mat-toolbar, mat-button, mat-menu, mat-icon and mat-icon-button for this:\n\n\nListing 79. app.component.html:\n\n\n\n\n\nThe color attribute on the mat-toolbar element will give it the primary (indigo) color as defined by our theme. The color attribute works with most Angular Material components; the possible values are 'primary', 'accent' and 'warn'.\nThe mat-toolbar is a suitable component to represent a header. It serves as a placeholder for elements we want in our header.\nInside the mat-toolbar, we start with a button having mat-icon-button attribute, which itself contains a mat-icon element having the value menu. This will serve as a menu button which we can use to toggle the sidenav.\nWe follow it with some sample buttons having the mat-button attribute. Notice the first button has a property matMenuTriggerFor bound to a local reference submenu. As the property name suggests, the click of this button will display the mat-menu element with the specified local reference as a drop-down menu. The rest of the code is self explanatory.\n\n\n\n\n\nFigure 59. This is how our application looks with the first menu button (Menu 1) clicked.\n\n\nWe want to keep the sidenav toggling menu button on the left and move the rest to the right to make it look better. To do this we add a class to the menu icon button:\n\n\nListing 80. app.component.html:\n\n\n\n\n\nAnd in the app.component.scss file, we add the following style:\n\n\nListing 81. app.component.scss:\n\n\n\n\n\nThe mat-toolbar element already has it’s display property set to flex. Setting the menu icon button’s margin-right property to auto keeps itself on the left and pushes the other elements to the right.\n\n\n\n\n\nFigure 60. Final look of the header.\n\n\nNext, we will create a sidenav. But before that lets create a couple of components to navigate between, the links of which we will add to the sidenav.\nWe will use the ng generate component (or ng g c command for short) to create Home and Data components. (Append --project=devon4ng-mat-layout to the command in a Nx workspace). We nest them in the pages sub-directory since they represent our pages.\n\n\n\n\nng g c pages/home\n\n\nng g c pages/data;\n\n\n\n\nLet us set up the routing such that when we visit http://localhost:4200/ root url we see the HomeComponent and when we visit http://localhost:4200/data url we see the  DataComponent.\nWe had opted for routing while creating the application, so we have the routing module app-routing.module.ts setup for us. In this file, we have the empty routes array where we set up our routes.\n\n\nListing 82. app-routing.module.ts:\n\n\n\n\n\nWe need to provide a hook where the components will be loaded when their respective URLs are loaded. We do that by using the router-outlet directive in the app.component.html.\n\n\nListing 83. app.component.html:\n\n\n\n\n\nNow when we visit the defined URLs we see the appropriate components rendered on screen.\n\n\nLets change the contents of the components to have something better.\n\n\nListing 84. home.component.html:\n\n\n\n\n\nListing 85. home.component.scss:\n\n\n\n\n\nListing 86. data.component.html:\n\n\n\n\n\nListing 87. data.component.scss:\n\n\n\n\n\nThe pages look somewhat better now:\n\n\n\n\n\nFigure 61. Home page\n\n\n\n\n\nFigure 62. Data page\n\n\nLet us finally create the sidenav. To implement the sidenav we need to use 3 Angular Material components: mat-sidenav-container, mat-sidenav and mat-sidenav-content.\nThe mat-sidenav-container, as the name suggests, acts as a container for the sidenav and the associated content. So it is the parent element, and mat-sidenav and mat-sidenav-content are the children sibling elements. mat-sidenav represents the sidenav. We can put any content we want, though it is usually used to contain a list of navigational links. The mat-sidenav-content element is for containing the contents of our current page. Since we need the sidenav application-wide, we will put it in the app.component.html.\n\n\nListing 88. app.component.html:\n\n\n\n\n\nThe mat-sidenav has a mode property, which accepts one of the 3 values: over, push and side. It decides the behavior of the sidenav. mat-sidenav also has a disableClose property which accents a boolean value. It toggles the behavior where we click on the backdrop or press the Esc key to close the sidenav. There are other properties which we can use to customize the appearance, behavior and position of the sidenav. You can find the properties documented online at https://material.angular.io/components/sidenav/api\nWe moved the router-outlet directive inside the mat-sidenav-content where it will render the routed component.\nBut if you check the running application in the browser, we don’t see the sidenav yet. That is because it is closed. We want to have the sidenav opened/closed at the click of the menu icon button on the left side of the header we implemented earlier. Notice we have set a local reference #sidenav on the mat-sidenav element. We can access this element and call its toggle() function to toggle open or close the sidenav.\n\n\nListing 89. app.component.html:\n\n\n\n\n\n\n\n\nFigure 63. Sidenav is implemented\n\n\nWe can now open the sidenav by clicking the menu icon button. But it does not look right. The sidenav is only as wide as its content. Also the page does not stretch the entire viewport due to lack of content.\nLet’s add the following styles to make the page fill the viewport:\n\n\nListing 90. app.component.scss:\n\n\n\n\n\nThe sidenav width will be corrected when we add the navigational links to it. That is the only thing remaining to be done. Lets implement it now:\n\n\nListing 91. app.component.html:\n\n\n\n\n\nWe use the mat-nav-list element to set a list of navigational links. We use the a tags with mat-list-item directive. We implement a click listener on each link to close the sidenav when it is clicked. The routerLink directive is used to provide the URLs to navigate to. The routerLinkActive directive is used to provide the class name which will be added to the link when it’s URL is visited. Here we name the class`active`. To style it, let' modify the app.component.scss file:\n\n\nListing 92. app.component.scss:\n\n\n\n\n\nNow we have a working application with a basic layout: a header with some menu and a sidenav with some navigational links.\n\n\n\n\n\nFigure 64. Finished application\n\n\n\n"}