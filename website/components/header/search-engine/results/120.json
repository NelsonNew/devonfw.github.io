{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-angular-elements.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-angular-elements.asciidoc_how-to-use-angular-elements","title":"How to use Angular Elements?","breadcrumbs":["Angular","Angular","Angular Elements"],"text":"How to use Angular Elements?\n\nIn a generalized way, a simple Angular component could be transformed to an Angular Element with this steps:\n\n\nInstalling Angular Elements\n\nThe first step is going to be install the library using our preferred packet manager:\n\n\nNPM\n\n\n\n\n\n\n\nYARN\n\n\n\n\n\n\n\n\nPreparing the components in the modules\n\nInside the app.module.ts, in addition to the normal declaration of the components inside declarations, the modules inside imports and the services inside providers, the components need to added in entryComponents. If there are components that have their own module, the same logic is going to be applied for them, only adding in the app.module.ts the components that do not have their own module. Here is an example of this:\n\n\n\n\n\n\n\nAfter that is done, the constructor of the module is going to be modified to use injector and bootstrap the application defining the components. This is going to allow the Angular Element to get the injections and to define a component tag that will be used later:\n\n\n\n\n\n\n\n\nA component example\n\nIn order to be able to use a component, @Input() and @Output() variables are used. These variables are going to be the ones that will allow the Angular Element to communicate with the framework/JavaScript:\n\n\nComponent html\n\n\n\n\n\n\n\nComponent ts\n\n\n\n\n\n\n\nIn this file there are definitions of multiple variables that will be used as input and output. Since the input variables are going to be used directly by html, only lowercase and underscore strategies can be used for them. On the onSubmit(dishForm: NgForm) a service is used to pass this variables to another component. Finally, as a last thing, the selector inside @Component has been removed since a tag that will be used dynamically was already defined in the last step.\n\n\n\nSolving the error\n\nIn order to be able to use this Angular Element a Polyfills/Browser support related error needs to solved. This error can be solved in two ways:\n\n\nChanging the target\n\nOne solution is to change the target in tsconfig.json to es2015. This might not be doable for every application since maybe a specific target is required.\n\n\n\nInstalling Polyfaces\n\nAnother solution is to use AutoPollyfill. In order to do so, the library is going to be installed with a packet manager:\n\n\nYarn\n\n\n\n\n\n\n\nNpm\n\n\n\n\n\n\n\nAfter the packet manager has finished, inside the src folder a new file polyfills.ts is found. To solve the error, importing the corresponding adapter (custom-elements-es5-adapter.js) is necessary:\n\n\n\n\n\n\n\nIf you want to learn more about polyfills in angular you can do it here\n\n\n\n\nBuilding the Angular Element\n\nFirst, before building the Angular Element, every element inside that app component except the module need to be removed. After that, a bash script is created in the root folder,. This script will allow to put every necessary file into a JS.\n\n\n\n\n\n\n\nAfter executing the bash script, it will generate inside the path dist/\"projectName\" (or dist/apps/projectname in a Nx workspace) a JS file named \"nameWantedAngularElement\".js and a css file.\n\n\nBuilding with ngx-build-plus (Recommended)\n\nThe library ngx-build-plus allows to add different options when building. In addition, it solves some errors that will occur when trying to use multiple angular elements in an application. In order to use it, yarn or npm can be used:\n\n\nYarn\n\n\n\n\n\n\n\nNpm\n\n\n\n\n\n\n\nIf you want to add it to a specific sub project in your projects folder, use the --project:\n\n\n\n\n\n\n\nUsing this library and the following command, an isolated Angular Element which wonâ€™t have conflict with others can be generated. This Angular Element will not have a polyfill so, the project where we use them will need to include a poliyfill with the Angular Element requirements.\n\n\n\n\n\n\n\nThis command will generate three things:\n\n\n\n\nThe main JS bundle\n\n\nThe script JS\n\n\nThe css\n\n\n\n\nThese files will be used later instead of the single JS generated in the last step.\n\n\nExtra parameters\n\nHere are some extra useful parameters that ngx-build-plus provides:\n\n\n\n\n--keep-polyfills: This parameter is going to allow us to keep the polyfills. This needs to be used with caution, avoiding using multiple different polyfills that could cause an error is necessary.\n\n\n--extraWebpackConfig webpack.extra.js: This parameter allows us to create a JavaScript file inside our Angular Elements project with the name of different libraries. Using webpack these libraries will not be included in the Angular Element. This is useful to lower the size of our Angular Element by removing libraries shared. Example:\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the Angular Element\n\nThe Angular Element that got generated in the last step can be used in almost every framework. In this case, the Angular Element is going to be used in html:\n\n\nListing 23. Sample index.html version without ngx-build-plus\n\n\n\n\n\nListing 24. Sample index.html version with ngx-build-plus\n\n\n\n\n\nIn this html, the css generated in the last step is going to be imported inside the &lt;head&gt; and then, the JavaScript element is going to be imported at the end of the body. After that is done, There is two uses of Angular Elements in the html, one directly with use of the @input() variables as parameters commented in the html:\n\n\n\n\n\n\n\nand one dynamically inside the script:\n\n\n\n\n\n\n\nThis JavaScript is an example of how to create dynamically an Angular Element inserting attributed to fill our @Input() variables and listen to the @Output() that was defined earlier. This is done with:\n\n\n\n\n\n\n\nThis allows JavaScript to hook with the @Output() event emitter that was defined. When this event gets called, another component that was defined gets inserted dynamically.\n\n\n\n\n"}