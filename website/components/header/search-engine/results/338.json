{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_cookbook-abstract-class-store.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-add-electron.asciidoc_add-electron-to-an-angular-application-using-angular-cli","title":"Add Electron to an Angular application using Angular CLI","breadcrumbs":["Angular","Cookbook","Abstract Class Store"],"text":"Add Electron to an Angular application using Angular CLI\n\nThis cookbook recipe explains how to integrate Electron in an Angular 10+ application. Electron is a framework for creating native applications with web technologies like JavaScript, HTML, and CSS. As an example, very well known applications as Visual Studio Code, Atom, Slack or Skype (and many more) are using Electron too.\n\n\n\n\n\nNote\n\n\nAt the moment of this writing Angular 11.2.0, Electron 11.2.3 and Electron-builder 22.9.1 were the versions available.\n\n\n\n\n\nHere are the steps to achieve this goal. Follow them in order.\n\n\nAdd Electron and other relevant dependencies\n\nThere are two different approaches to add the dependencies in the package.json file:\n\n\n\n\nWriting the dependencies directly in that file.\n\n\nInstalling using npm install or yarn add.\n\n\n\n\n\n\n\nImportant\n\n\nPlease remember if the project has a package-lock.json or yarn.lock file use npm or yarn respectively.\n\n\n\n\n\nIn order to add the dependencies directly in the package.json file, include the following lines in the devDependencies section:\n\n\n\n\n\n\n\nAs indicated above, instead of this npm install can be used:\n\n\n\n\n\n\n\nOr with yarn:\n\n\n\n\n\n\n\n\nCreate the necessary typescript configurations\n\nIn order to initiate electron in an angular app we need to modify the tsconfig.json file and create a tsconfig.serve.json and a tsconfig.base.json in the root folder.\n\n\ntsconfig.json\n\nThis file needs to be modified to create references to ./src/tsconfig.app.json and ./src/tsconfig.spec.json to support different configurations.\n\n\n\n\n\n\n\n\ntsconfig.app.json\n\n\n\n\n\n\n\ntsconfig.spec.json\n\n\n\n\n\n\n\ntsconfig.base.json\n\nThis is shared between tsconfig.app.json and tsconfig.spec.json and it will be extended on each config file.\n\n\n\n\n\n\n\n\ntsconfig.serve.json\n\nIn the root, tsconfig.serve.json needs to be created. This typescript config file is going to be used when we serve electron:\n\n\n\n\n\n\n\n\n\nAdd Electron build configuration\n\nIn order to configure electron builds properly we need to create a new json on our application, let’s call it electron-builder.json. For more information and fine tuning please refer to the Electron Builder official documentation.\n\n\nThe contents of the file will be something similar to the following:\n\n\n\n\n\n\n\nThere are two important things in this files:\n\n\n\n\n\"output\": this is where electron builder is going to build our application\n\n\n\"icon\": in every OS possible there is an icon parameter, the route to the icon folder that will be created after building with angular needs to be used here. This will make it so the electron builder can find the icons and build.\n\n\n\n\n\nModify angular.json\n\nangular.json has to to be modified so the project is build inside /dist without an intermediate folder.\n\n\n\n\n\n\n\n\nCreate the electron window in electron-main.ts\n\nIn order to use electron, a file needs to be created at the root of the application (main.ts). This file will create a window with different settings checking if we are using --serve as an argument:\n\n\n\n\n\n\n\n\nAdd the electron window and improve the package.json scripts\n\nInside package.json the electron window that will be transformed to electron-main.js when building needs to be added.\n\n\n\n\n\n\n\nThe scripts section in the package.json can be improved to avoid running too verbose commands. As a very complete example we can take a look to the My Thai Star’s scripts section and copy the lines useful in your project. In any case, at least we recommend to add the following lines:\n\n\n\n\n\n\n\nThe electron: scripts do the following:\n\n\n\n\nelectron:tsc: Compiles electron TS files.\n\n\nelectron:run: Serves Angular app and runs electron.\n\n\nelectron:serve: Serves electron with an already running angular app (i.e. a ng serve command running on another terminal).\n\n\nelectron:pack: Packs electron app.\n\n\nelectron:build: Builds electron app.\n\n\n\n\n\n\n"}