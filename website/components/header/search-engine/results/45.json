{"type":"doc","filename":"asciidoc_devonfw-guide_my-thai-star.wiki_master-my-thai-star.asciidoc_server-side_3.html","anchor":"devonfw-guide_my-thai-star.wiki_java-testing.asciidoc","title":"Java testing","breadcrumbs":["MyThaiStar","Testing","Server Side"],"text":"Java testing\n\nComponent testing\n\nWe are going to test our components as a unit using Spring Test and Devon4j-test modules.\n\n\nIn order to test a basic component of the app first we will create a test class in the src/test/java folder and inside the main package of the test module. We will name the class following the convention.\n\n\n\n\n\n\n\nThen, in the declaration of the test class, we will use the @SpringBootTest annotation to run the application context. In addition, we will extend the ComponentTest from Devon4j-test module to have access to the main functionalities of the module, see more details here.\n\n\nSpring Test allows us to use Dependency Injection so we can inject our component directly using the @Inject annotation.\n\n\nEach test will be represented by a method annotated with @Test. Inside the method we will test one functionality, evaluating the result thanks to the asserts provided by the ComponentTest class that we are extending.\n\n\nA simple test example\n\n\n\n\n\n\n\n\nRunning the tests\n\nFrom Eclipse\n\nWe can run the test from within Eclipse with the contextual menu Run As &gt; JUnit Test. This functionality can be launched from method level, class level or even package level. The results will be shown in the JUnit tab.\n\n\n\n\n\n\n\n\nFrom command line using Maven\n\nWe can also run tests using Maven and the command line, using the command mvn test (or mvn clean test).\n\n\n\n\n\n\n\nDoing this we will run all the tests of the project (recognized by the Test word at the end of the classes) and the results will be shown by sub-project.\n\n\n\n\n\n\n\n\n\n\n\n"}