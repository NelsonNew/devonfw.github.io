{"type":"doc","filename":"asciidoc_devonfw-guide_my-thai-star.wiki_master-my-thai-star.asciidoc_client-side.html","anchor":"devonfw-guide_my-thai-star.wiki_angular-design.asciidoc","title":"Angular design","breadcrumbs":["MyThaiStar","Technical design","Client Side"],"text":"Angular design\n\nIntroduction\n\nMyThaiStar client side has been built using latest frameworks, component libraries and designs:\n\n\nAngular 4 as main front-end Framework. https://angular.io/\n\n\nAngular/CLI 1.0.5 as Angular tool helper. https://github.com/angular/angular-cli\n\n\nCovalent Teradata 1.0.0-beta4 as Angular native component library based on Material Design. https://teradata.github.io/covalent/#/\n\n\nAngular/Material2 1.0.0-beta5 used by Covalent Teradata. https://github.com/angular/material2\n\n\nNote: this dependencies are evolving at this moment and if it is possible, we are updating it on the project.\n\n\n\nBasic project structure\n\nThe project is using the basic project seed that Angular/CLI provides with “ng new &lt;project name&gt;”. Then the app folder has been organized as Angular recommends and goes as follows:\n\n\n\n\napp\n\n\n\ncomponents\n\n\n\nsub-components\n\n\nshared\n\n\ncomponent files\n\n\n\n\n\nmain app component\n\n\n\n\n\nassets folder\n\n\nenvironments folder\n\n\nrest of angular files\n\n\n\n\nThis structure can be shown in the following example image:\n\n\n\n\n\n\n\n\nMain Views and components\n\nList of components that serve as a main view to navigate or components developed to make atomically a group of functionalities which given their nature, can be highly reusable through the app.\n\n\n\n\n\n\n\nNote: no-name-route corresponds to whatever URL the user introduced and does not exist, it redirects to Home-Component.\n\n\nPublic area\n\nApp Component\n\nContains the components that are on top of all views, including:\n\n\nOrder sidenav\n\nSidenav where selected orders are displayed with their total price and some comments.\n\n\n\nNavigation sidenav (only for mobile)\n\nThis sidenav proposal is to let user navigate through the app when the screen is too small to show the navigation buttons on the header.\n\n\n\nHeader\n\nIt contains the title, and some other basic functions regarding open and close sidenavs.\n\n\n\nFooter (only for desktop)\n\nAt the end of the page that shows only when open on desktop.\n\n\n\n\nHome-Component\n\nMain view that shows up when the app initializes.\n\n\n\nMenu-Component\n\nView where the users can view, filter and select the dishes (with their extras) they want to order it contains a component to each menu entry:\n\n\nMenu-card\n\nThis component composes all the data of a dish in a card. Component made to display indeterminate number of dishes easily.\n\n\n\n\nBook Table Component\n\nView to make book a table in a given data with a given number of assistants or create a reservation with a number of invitations via email.\n\n\nBook-table-dialog\n\nDialog which opens as a result of fulfilling the booking form, it displays all the data of the booking attempt, if everything is correct, the user can send the information or cancel if something is wrong.\n\n\n\nInvitation-dialog\n\nDialog which opens as a result of fulfilling the invitation form, it displays all the data of the booking with friends attempt, if everything is correct, the user can send the information or cancel if something is wrong.\n\n\n\n\nUser Area\n\nGroup of dialogs with the proposal of giving some functionalities to the user, as login, register, change password or connect with Twitter.\n\n\nLogin-dialog\n\nDialog with a tab to navigate between login and register.\n\n\n\nPassword-dialog\n\nFunctionality reserved to already logged users, in this dialog the user can change freely their password.\n\n\n\nTwitter-dialog\n\nDialog designed specifically to connect your user account with Twitter.\n\n\n\n\n\nWaiter cockpit area\n\nRestricted area to workers of the restaurant, here we can see all information about booked tables with the selected orders and the reservations with all the guests and their acceptance or decline of the event.\n\n\nOrder Cockpit Component\n\nData table with all the booked tables and a filter to search them, to show more info about that table you can click on it and open a dialog.\n\n\nOrder-dialog\n\nComplete display of data regarding the selected table and its orders.\n\n\n\n\nReservation Cockpit Component\n\nData table with all the reservations and a filter to search them, to show more info about that table you can click on it and open a dialog.\n\n\nReservation-dialog\n\nComplete display of data regarding the selected table and its guests.\n\n\n\n\n\nEmail Management\n\nAs the application send emails to both guests and hosts, we choose an approach based on URL where the email contain a button with an URL to a service in the app and a token, front-end read that token and depending on the URL, will redirect to one service or another. For example:\n\n\n\n\n\n\n\nThis URL will tell the app that is a cancellation of a booking with the token CB_20170605_8fb5bc4c84a1c5049da1f6beb1968afc. The app will process this information, send it to back-end with the correct headers, show the confirmation of the event and redirect to home page.\n\n\nThe main cases at the moment are:\n\n\nAccept Invite\n\nA guest accept an invitation sent by a host. It will receive another email to decline if it change its mind later on.\n\n\n\nReject Invite\n\nA guest decline the invitation.\n\n\n\nCancel Reservation\n\nA host cancel the reservation, everybody that has accepted or not already answered will receive an email notifying this event is canceled. Also all the orders related to this reservations will be removed.\n\n\n\nCancel Orders\n\nWhen you have a reservation, you will be assigned to a token, with that token you can save your order in the restaurant. When sent, you will receive an email confirming the order and the possibility to remove it.\n\n\n\n\n\nServices and directives\n\nServices are where all the main logic between components of that view should be. This includes calling a remote server, composing objects, calculate prices, etc.\n\n\nDirectives are a single functionality that are related to a component.\n\n\nAs it can be seen in the basic structure, every view that has a minimum of logic or need to call a server has its own service located in the shared folder.\n\n\nAlso, services and directives can be created to compose a reusable piece of code that will be reused in some parts of the code:\n\n\nPrice-calculator-service\n\nThis service located in the shared folder of sidenav contains the basic logic to calculate the price of a single order (with all the possibilities) and to calculate the price of a full list of orders for a table. As this is used in the sidenav and in the waiter cockpit, it has been exported as a service to be imported where needed and easily testable.\n\n\n\nAuthentication\n\nAuthentication services serves as a validator of roles and login and, at the same time, stores the basic data regarding security and authentication.\n\n\nMain task of this services is to provide visibility at app level of the current user information:\n\n\n\n\nCheck if the user is logged or not.\n\n\nCheck the permissions of the current user.\n\n\nStore the username and the JWT token.\n\n\n\n\n\nSnack Service\n\nService created to serve as a factory of Angular Material Snackbars, which are used commonly through the app. This service accepts some parameters to customize the snackBar and opens it with this parameters.\n\n\n\nWindow Service\n\nFor responsiveness reasons, the dialogs have to accept a width parameter to adjust to screen width and this information is given by Window object, as it is a good practice to have it in an isolated service, which also calculates the width percentage to apply on the dialogs.\n\n\n\nEqual-validator-directive\n\nThis directive located in the shared folder of userArea is used in 2 fields to make sure they have the same value. This directive is used in confirm password fields in register and change password.\n\n\n\n\nMock Back-end\n\nTo develop meanwhile a real back-end is being developed let us to make a more realistic application and to make easier the adaptation when the back-end is able to be connected and called. Its structure is as following:\n\n\n\n\n\n\n\nContains the three main groups of functionalities in the application. Every group is composed by:\n\n\n\n\nAn interface with all the methods to implement.\n\n\nA service that implements that interface, the main task of this service is to choose between real back-end and mock back-end depending on an environment variable.\n\n\nMock back-end service which implements all the methods declared in the interface using mock data stored in a local file and mainly uses Lodash to operate the arrays.\n\n\nReal back-end service works as Mock back-end but in this case the methods call for server rest services through Http.\n\n\n\n\nBooking\n\nThe booking group of functionalities manages the calls to reserve a table with a given time and assistants or with guests, get reservations filtered, accept or decline invitations or cancel the reservation.\n\n\n\nOrders\n\nManagement of the orders, including saving, filtering and cancel an order.\n\n\n\nDishes\n\nThe dishes group of functionalities manages the calls to get and filter dishes.\n\n\n\nLogin\n\nLogin manages the userArea logic: login, register and change password.\n\n\n\n\nSecurity\n\nMy Thai Star security is composed by two main security services:\n\n\nAuth-guard\n\nFront-end security approach, this service implements an interface called CanActivate that comes from angular/router module. CanActivate interface forces you to implement a canActivate() function which returns a Boolean.\nThis service checks with the Auth-Service stored data if the user is logged and if he has enough permission to access the waiter cockpit. This prevents that a forbidden user could access to waiter cockpit just by editing the URL in the browser.\n\n\n\nJWT\n\nJSON Web Token consists of a token that is generated by the server when the user logs in. Once provided, the token has to be included in an Authentication header on every Http call to the rest service, otherwise the call will be forbidden.\nJWT also has an expiration date and a role checking, so if a user has not enough permissions or keeps logged for a long certain amount of time that exceeds this expiration date, the next time he calls for a service call, the server will return an error and forbid the call. You can log again to restore the token.\n\n\nHttpClient\n\nTo implement this Authorization header management, an HttpClient service has been implemented.\nThis services works as an envelope of Http, providing some more functionalities, likes a header management and an automatically management of a server token error in case the JWT has expired, corrupted or not permitted.\n\n\n\n\n\n\n\n"}