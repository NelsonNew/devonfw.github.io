{"type":"doc","filename":"devonfw-guide_devon4node.wiki_guides-validation.asciidoc.html","anchor":"devonfw-guide_devon4node.wiki_guides-validation.asciidoc_defining-validators","title":"Defining Validators","breadcrumbs":["NodeJS","Guides","Validation"],"text":"Defining Validators\n\nThe ValidationPipe needs to know how to validate the input. For that purpose we use the class-validator package. This package allows you to define the validation of a class by using decorators.\n\n\nFor example:\n\n\n\n\n\n\n\nAs you can see in the previous example, we used some decorators in order to define the validators for every property of the Coffee class. You can find all decorators in the class-validator github repository.\n\n\nNow, when you want to receive a Coffee as input in some endpoint, it will execute the validations before executing the handler function.\n\n\n\n\n\n\n\n\nIn order to be able to use the class-validator package, you must use classes instead of interfaces. As you know interfaces disappear at compiling time, and class-validator need to know the metadata of the properties in order to be able to validate.\n\n\n\n\n\n\n\n\n\n\n\nThe ValidationPipe only works if you put a specific type in the handler definition. For example, if you define a handler like getCoffee(@Body() coffee: any): Coffee {} the ValidationPipe will not do anything. You must specify the type of the input: getCoffee(@Body() coffee: Coffee): Coffee {}\n\n\n\n\n\n\n\n\n"}