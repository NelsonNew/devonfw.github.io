{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_services-layer.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_services-layer.asciidoc_store","title":"Store","breadcrumbs":["Angular","Layers","Services Layer"],"text":"Store\n\nA store is a class which defines and handles application state with its transitions over time.\nInteraction with a store is always synchronous.\nA basic implementation using RxJS can look like this.\n\n\n\n\n\nTip\n\n\nA more profound implementation taken from a real-life project can be found here (Abstract Class Store).\n\n\n\n\n\nListing 33. Store defined using RxJS\n\n\n\n\n\nIn the example ProductSearchStore handles state of type ProductSearchState.\nThe public API is the property state$ which is an observable of type ProductSearchState.\nThe state can be changed with method calls.\nSo every desired change to the state needs to be modeled with an method.\nIn reactive terminology this would be an Action.\nThe store does not use any services.\nSubscribing to the state$ observable leads to the subscribers receiving every new state.\n\n\nThis is basically the Observer Pattern:\nThe store consumer registers itself to the observable via state$.subscribe() method call.\nThe first parameter of subscribe() is a callback function to be called when the subject changes.\nThis way the consumer - the observer - is registered.\nWhen next() is called with a new state inside the store, all callback functions are called with the new value.\nSo every observer is notified of the state change.\nThis equals the Observer Pattern push type.\n\n\nA store is the API for Smart Components to receive state from the service layer.\nState transitions are handled automatically with Smart Components registering to the state$ observable.\n\n\n\n"}