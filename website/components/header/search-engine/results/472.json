{"type":"doc","filename":"devonfw-guide_devon4node.wiki_guides-coding-conventions.asciidoc.html","anchor":"devonfw-guide_devon4node.wiki_guides-coding-conventions.asciidoc","title":"Coding Conventions","breadcrumbs":["NodeJS","Guides","Coding Conventions"],"text":"Coding Conventions\n\ndevon4node defines some coding conventions in order to improve the readability, reduce the merge conflicts and be able to develop applications in an industrialized way.\n\n\nIn order to ensure that you are following the devon4node coding conventions, you can use the following tools:\n\n\n\n\nESLint: ESLint ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs. We recommend to use the ESLint VSCode extension (included in the devonfw Platform Extension Pack) in order to be able to see the linting errors while you are developing.\n\n\nPrettier: Prettier is a code formatter. We recommend to use the Prettier VSCode extension (included in the devonfw Platform Extension Pack) and enable the editor.formatOnSave option.\n\n\ndevon4node application schematic: this tool will generate code following the devon4node coding conventions. Also, when you generate a new project using the devon4node application schematic, it generates the configuration files for TSLint and Prettier that satisfy the devon4node coding conventions.\n\n\n\n\nWhen you combine all tools, you can be sure that you follow the devon4node coding conventions.\n\n\n"}