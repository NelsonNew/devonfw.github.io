{"type":"doc","filename":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc.html","anchor":"devonfw-guide_devon4ng.wiki_guide-testing.asciidoc_testing-services","title":"Testing services","breadcrumbs":["Angular","Angular","Testing"],"text":"Testing services\n\nWhen testing services both strategies - Isolated unit tests and Angular Testing Utilities - are valid options.\n\n\nThe goal of such tests are\n\n\n\n\nassuring the behavior for valid data.\n\n\nassuring the behavior for invalid data.\n\n\ndocumenting functionality\n\n\nsave performing refactoring\n\n\nthinking about edge case behavior while testing\n\n\n\n\nFor simple services Isolated unit tests can be written.\nWriting these tests takes lesser effort and they can be written very fast.\n\n\nThe following listing gives an example of such tests.\n\n\nListing 70. Testing a simple services with Isolated unit tests\n\n\n\n\n\nFor testing Use Case services the Angular Testing Utilities should be used.\nThe following listing gives an example.\n\n\nListing 71. Test setup for testing use case services with Angular Testing Utilities\n\n\n\n\n\nWhen using TestBed, it is important\n\n\n\n\nto import HttpClientTestingModule for stubbing the back-end\n\n\nto import RouterTestingModule for stubbing the Angular router\n\n\nnot to stub stores, adapters and business services\n\n\nto stub services from libraries like FlightCalculationService - the correct implementation of libraries should not be tested by these tests.\n\n\n\n\nTesting back-end communication looks like this:\n\n\nListing 72. Testing back-end communication with Angular HttpTestingController\n\n\n\n\n\nThe first test assures a correct XHR request is performed if initializePrintDialog() is called and no data is in the store.\nThe second test assures no XHR request IST performed if the needed data is already in the store.\n\n\nThe next steps are checks for the correct implementation of logic.\n\n\nListing 73. Example testing a Use Case service\n\n\n\n\n\n\n\n\n"}